{
  "address": "0x80C048aD1d21C244f191dbF6187b43B22D2354Cd",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_agiToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_oracle",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_treasury",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_dex",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_wavax",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "initialOwner",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "OwnableInvalidOwner",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "OwnableUnauthorizedAccount",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "fundId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "creator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "fundName",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "fundTicker",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "fundAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address[]",
          "name": "underlyingTokens",
          "type": "address[]"
        }
      ],
      "name": "FundCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "FUND_CREATION_FEE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "agiToken",
      "outputs": [
        {
          "internalType": "contract AGIToken",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "fundName",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "fundTicker",
          "type": "string"
        },
        {
          "internalType": "address[]",
          "name": "tokens",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "weightages",
          "type": "uint256[]"
        }
      ],
      "name": "createFund",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "creationFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "creatorFunds",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "dex",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "fundById",
      "outputs": [
        {
          "internalType": "contract Fund",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "funds",
      "outputs": [
        {
          "internalType": "contract Fund",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "creator",
          "type": "address"
        }
      ],
      "name": "getCreatorFunds",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "fundId",
          "type": "uint256"
        }
      ],
      "name": "getFund",
      "outputs": [
        {
          "internalType": "address",
          "name": "fundAddress",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "fundName",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "fundTicker",
          "type": "string"
        },
        {
          "internalType": "address[]",
          "name": "underlyingTokens",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "weightages",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "startIndex",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "endIndex",
          "type": "uint256"
        }
      ],
      "name": "getFunds",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTotalFunds",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "oracle",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "treasury",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newAgiToken",
          "type": "address"
        }
      ],
      "name": "updateAgiToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newDex",
          "type": "address"
        }
      ],
      "name": "updateDex",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOracle",
          "type": "address"
        }
      ],
      "name": "updateOracle",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newTreasury",
          "type": "address"
        }
      ],
      "name": "updateTreasury",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newWavax",
          "type": "address"
        }
      ],
      "name": "updateWavax",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "wavax",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xbc4abc87247c33def0e37ddd47da619fe08e8a30ed71f915de7af02c93160c00",
  "receipt": {
    "to": null,
    "from": "0xe63D399611EA823F7442b78d43F972fF61D7b05C",
    "contractAddress": "0x80C048aD1d21C244f191dbF6187b43B22D2354Cd",
    "transactionIndex": 2,
    "gasUsed": "5467546",
    "logsBloom": "0x
    "blockHash": "0x897c2d8c57c247ee5799234ccb6af4e92e8621dd1d71842a8dee31045e76e2ba",
    "transactionHash": "0xbc4abc87247c33def0e37ddd47da619fe08e8a30ed71f915de7af02c93160c00",
    "logs": [
      {
        "transactionIndex": 2,
        "blockNumber": 45678085,
        "transactionHash": "0xbc4abc87247c33def0e37ddd47da619fe08e8a30ed71f915de7af02c93160c00",
        "address": "0x80C048aD1d21C244f191dbF6187b43B22D2354Cd",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000e63d399611ea823f7442b78d43f972ff61d7b05c"
        ],
        "data": "0x",
        "logIndex": 9,
        "blockHash": "0x897c2d8c57c247ee5799234ccb6af4e92e8621dd1d71842a8dee31045e76e2ba"
      }
    ],
    "blockNumber": 45678085,
    "cumulativeGasUsed": "6122575",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xefaAE152f5cFcbe84306aeC25a1Ce593B3c34227",
    "0x3C8aFa3DB81119aE323DcDBeB92203ecfe9B8A76",
    "0xe63D399611EA823F7442b78d43F972fF61D7b05C",
    "0x2D99ABD9008Dc933ff5c0CD271B88309593aB921",
    "0xd00ae08403B9bbb9124bB305C09058E32C39A48c",
    "0xe63D399611EA823F7442b78d43F972fF61D7b05C"
  ],
  "numDeployments": 3,
  "solcInputHash": "49fd572d95aba57974a5de2f51f03e74",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_agiToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_oracle\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_treasury\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_dex\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_wavax\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"initialOwner\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"fundId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"fundName\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"fundTicker\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"fundAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"underlyingTokens\",\"type\":\"address[]\"}],\"name\":\"FundCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"FUND_CREATION_FEE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"agiToken\",\"outputs\":[{\"internalType\":\"contract AGIToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"fundName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"fundTicker\",\"type\":\"string\"},{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"weightages\",\"type\":\"uint256[]\"}],\"name\":\"createFund\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"creationFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"creatorFunds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dex\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"fundById\",\"outputs\":[{\"internalType\":\"contract Fund\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"funds\",\"outputs\":[{\"internalType\":\"contract Fund\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"}],\"name\":\"getCreatorFunds\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"fundId\",\"type\":\"uint256\"}],\"name\":\"getFund\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"fundAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"fundName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"fundTicker\",\"type\":\"string\"},{\"internalType\":\"address[]\",\"name\":\"underlyingTokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"weightages\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"startIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endIndex\",\"type\":\"uint256\"}],\"name\":\"getFunds\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalFunds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oracle\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasury\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAgiToken\",\"type\":\"address\"}],\"name\":\"updateAgiToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newDex\",\"type\":\"address\"}],\"name\":\"updateDex\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOracle\",\"type\":\"address\"}],\"name\":\"updateOracle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newTreasury\",\"type\":\"address\"}],\"name\":\"updateTreasury\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newWavax\",\"type\":\"address\"}],\"name\":\"updateWavax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wavax\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Avanguard Index\",\"errors\":{\"OwnableInvalidOwner(address)\":[{\"details\":\"The owner is not a valid owner account. (eg. `address(0)`)\"}],\"OwnableUnauthorizedAccount(address)\":[{\"details\":\"The caller account is not authorized to perform an operation.\"}]},\"kind\":\"dev\",\"methods\":{\"createFund(string,string,address[],uint256[])\":{\"details\":\"Create a new fund\",\"params\":{\"fundName\":\"Name of the fund\",\"fundTicker\":\"Ticker symbol for the fund\",\"tokens\":\"Array of underlying token addresses\",\"weightages\":\"Array of token weightages (in basis points, 100% = 10000)\"}},\"creationFee()\":{\"details\":\"Returns the fund creation fee.\"},\"getCreatorFunds(address)\":{\"details\":\"Get all funds created by a specific creator\",\"params\":{\"creator\":\"The creator address\"},\"returns\":{\"_0\":\"Array of fund IDs created by the creator\"}},\"getFund(uint256)\":{\"details\":\"Get fund information by ID\",\"params\":{\"fundId\":\"The fund ID\"},\"returns\":{\"fundAddress\":\"The fund contract address\",\"fundName\":\"The fund name\",\"fundTicker\":\"The fund ticker\",\"underlyingTokens\":\"Array of underlying token addresses\",\"weightages\":\"Array of token weightages\"}},\"getFunds(uint256,uint256)\":{\"details\":\"Get all funds (for frontend pagination)\",\"params\":{\"endIndex\":\"Ending index\",\"startIndex\":\"Starting index\"},\"returns\":{\"_0\":\"Array of fund addresses\"}},\"getTotalFunds()\":{\"details\":\"Get total number of funds\",\"returns\":{\"_0\":\"Total number of funds created\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"updateAgiToken(address)\":{\"details\":\"Update AGI token address (only owner)\",\"params\":{\"newAgiToken\":\"New AGI token address\"}},\"updateDex(address)\":{\"details\":\"Update DEX address (only owner)\",\"params\":{\"newDex\":\"New DEX address\"}},\"updateOracle(address)\":{\"details\":\"Update oracle address (only owner)\",\"params\":{\"newOracle\":\"New oracle address\"}},\"updateTreasury(address)\":{\"details\":\"Update treasury address (only owner)\",\"params\":{\"newTreasury\":\"New treasury address\"}},\"updateWavax(address)\":{\"details\":\"Update WAVAX address (only owner)\",\"params\":{\"newWavax\":\"New WAVAX address\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"Fund Factory Contract - Creates and manages index funds\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/FundFactory.sol\":\"FundFactory\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    constructor(address initialOwner) {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xff6d0bb2e285473e5311d9d3caacb525ae3538a80758c10649a4d61029b017bb\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/draft-IERC6093.sol)\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard ERC20 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC20 tokens.\\n */\\ninterface IERC20Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientBalance(address sender, uint256 balance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC20InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC20InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender`\\u2019s `allowance`. Used in transfers.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     * @param allowance Amount of tokens a `spender` is allowed to operate with.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientAllowance(address spender, uint256 allowance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC20InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender` to be approved. Used in approvals.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC20InvalidSpender(address spender);\\n}\\n\\n/**\\n * @dev Standard ERC721 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC721 tokens.\\n */\\ninterface IERC721Errors {\\n    /**\\n     * @dev Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20.\\n     * Used in balance queries.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721InvalidOwner(address owner);\\n\\n    /**\\n     * @dev Indicates a `tokenId` whose `owner` is the zero address.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721NonexistentToken(uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates an error related to the ownership over a particular token. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param tokenId Identifier number of a token.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721IncorrectOwner(address sender, uint256 tokenId, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC721InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC721InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721InsufficientApproval(address operator, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC721InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC721InvalidOperator(address operator);\\n}\\n\\n/**\\n * @dev Standard ERC1155 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC1155 tokens.\\n */\\ninterface IERC1155Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC1155InsufficientBalance(address sender, uint256 balance, uint256 needed, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC1155InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC1155InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC1155MissingApprovalForAll(address operator, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC1155InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC1155InvalidOperator(address operator);\\n\\n    /**\\n     * @dev Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation.\\n     * Used in batch transfers.\\n     * @param idsLength Length of the array of token identifiers\\n     * @param valuesLength Length of the array of token amounts\\n     */\\n    error ERC1155InvalidArrayLength(uint256 idsLength, uint256 valuesLength);\\n}\\n\",\"keccak256\":\"0x60c65f701957fdd6faea1acb0bb45825791d473693ed9ecb34726fdfaa849dd7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"./IERC20.sol\\\";\\nimport {IERC20Metadata} from \\\"./extensions/IERC20Metadata.sol\\\";\\nimport {Context} from \\\"../../utils/Context.sol\\\";\\nimport {IERC20Errors} from \\\"../../interfaces/draft-IERC6093.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * The default value of {decimals} is 18. To change this, you should override\\n * this function so it returns a different value.\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n */\\nabstract contract ERC20 is Context, IERC20, IERC20Metadata, IERC20Errors {\\n    mapping(address account => uint256) private _balances;\\n\\n    mapping(address account => mapping(address spender => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the default value returned by this function, unless\\n     * it's overridden.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `value`.\\n     */\\n    function transfer(address to, uint256 value) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `value` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 value) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `value`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `value`.\\n     */\\n    function transferFrom(address from, address to, uint256 value) public virtual returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, value);\\n        _transfer(from, to, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\\n     */\\n    function _transfer(address from, address to, uint256 value) internal {\\n        if (from == address(0)) {\\n            revert ERC20InvalidSender(address(0));\\n        }\\n        if (to == address(0)) {\\n            revert ERC20InvalidReceiver(address(0));\\n        }\\n        _update(from, to, value);\\n    }\\n\\n    /**\\n     * @dev Transfers a `value` amount of tokens from `from` to `to`, or alternatively mints (or burns) if `from`\\n     * (or `to`) is the zero address. All customizations to transfers, mints, and burns should be done by overriding\\n     * this function.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _update(address from, address to, uint256 value) internal virtual {\\n        if (from == address(0)) {\\n            // Overflow check required: The rest of the code assumes that totalSupply never overflows\\n            _totalSupply += value;\\n        } else {\\n            uint256 fromBalance = _balances[from];\\n            if (fromBalance < value) {\\n                revert ERC20InsufficientBalance(from, fromBalance, value);\\n            }\\n            unchecked {\\n                // Overflow not possible: value <= fromBalance <= totalSupply.\\n                _balances[from] = fromBalance - value;\\n            }\\n        }\\n\\n        if (to == address(0)) {\\n            unchecked {\\n                // Overflow not possible: value <= totalSupply or value <= fromBalance <= totalSupply.\\n                _totalSupply -= value;\\n            }\\n        } else {\\n            unchecked {\\n                // Overflow not possible: balance + value is at most totalSupply, which we know fits into a uint256.\\n                _balances[to] += value;\\n            }\\n        }\\n\\n        emit Transfer(from, to, value);\\n    }\\n\\n    /**\\n     * @dev Creates a `value` amount of tokens and assigns them to `account`, by transferring it from address(0).\\n     * Relies on the `_update` mechanism\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\\n     */\\n    function _mint(address account, uint256 value) internal {\\n        if (account == address(0)) {\\n            revert ERC20InvalidReceiver(address(0));\\n        }\\n        _update(address(0), account, value);\\n    }\\n\\n    /**\\n     * @dev Destroys a `value` amount of tokens from `account`, lowering the total supply.\\n     * Relies on the `_update` mechanism.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * NOTE: This function is not virtual, {_update} should be overridden instead\\n     */\\n    function _burn(address account, uint256 value) internal {\\n        if (account == address(0)) {\\n            revert ERC20InvalidSender(address(0));\\n        }\\n        _update(account, address(0), value);\\n    }\\n\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     *\\n     * Overrides to this logic should be done to the variant with an additional `bool emitEvent` argument.\\n     */\\n    function _approve(address owner, address spender, uint256 value) internal {\\n        _approve(owner, spender, value, true);\\n    }\\n\\n    /**\\n     * @dev Variant of {_approve} with an optional flag to enable or disable the {Approval} event.\\n     *\\n     * By default (when calling {_approve}) the flag is set to true. On the other hand, approval changes made by\\n     * `_spendAllowance` during the `transferFrom` operation set the flag to false. This saves gas by not emitting any\\n     * `Approval` event during `transferFrom` operations.\\n     *\\n     * Anyone who wishes to continue emitting `Approval` events on the`transferFrom` operation can force the flag to\\n     * true using the following override:\\n     * ```\\n     * function _approve(address owner, address spender, uint256 value, bool) internal virtual override {\\n     *     super._approve(owner, spender, value, true);\\n     * }\\n     * ```\\n     *\\n     * Requirements are the same as {_approve}.\\n     */\\n    function _approve(address owner, address spender, uint256 value, bool emitEvent) internal virtual {\\n        if (owner == address(0)) {\\n            revert ERC20InvalidApprover(address(0));\\n        }\\n        if (spender == address(0)) {\\n            revert ERC20InvalidSpender(address(0));\\n        }\\n        _allowances[owner][spender] = value;\\n        if (emitEvent) {\\n            emit Approval(owner, spender, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `value`.\\n     *\\n     * Does not update the allowance value in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Does not emit an {Approval} event.\\n     */\\n    function _spendAllowance(address owner, address spender, uint256 value) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            if (currentAllowance < value) {\\n                revert ERC20InsufficientAllowance(spender, currentAllowance, value);\\n            }\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - value, false);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc3e1fa9d1987f8d349dfb4d6fe93bf2ca014b52ba335cfac30bfe71e357e6f80\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0xaa761817f6cd7892fcf158b3c776b34551cde36f48ff9703d53898bc45a94ea2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"},\"contracts/AGIToken.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\r\\npragma solidity >=0.8.0 <0.9.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\n\\r\\n/**\\r\\n * AGI Token - The governance token for Avanguard Index platform\\r\\n * Fixed supply of 1 billion tokens, no minting after deployment\\r\\n * @author Avanguard Index\\r\\n */\\r\\ncontract AGIToken is ERC20, Ownable {\\r\\n    uint256 public constant TOTAL_SUPPLY = 1_000_000_000 * 10**18; // 1 billion tokens with 18 decimals\\r\\n\\r\\n    constructor(address initialOwner) ERC20(\\\"Avanguard Index\\\", \\\"AGI\\\") Ownable(initialOwner) {\\r\\n        _mint(initialOwner, TOTAL_SUPPLY);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Override to prevent minting after deployment\\r\\n     */\\r\\n    function mint(address to, uint256 amount) public pure {\\r\\n        revert(\\\"Minting disabled after deployment\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Burn tokens from the caller's balance\\r\\n     * @param amount Amount of tokens to burn\\r\\n     */\\r\\n    function burn(uint256 amount) public {\\r\\n        _burn(msg.sender, amount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Burn tokens from a specific address (requires approval)\\r\\n     * @param from Address to burn tokens from\\r\\n     * @param amount Amount of tokens to burn\\r\\n     */\\r\\n    function burnFrom(address from, uint256 amount) public {\\r\\n        _spendAllowance(from, msg.sender, amount);\\r\\n        _burn(from, amount);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x122cf1c8e634d02d1ec84cdbb440659dd6653f58ec7943ce237c09ea2a1b9012\",\"license\":\"MIT\"},\"contracts/Fund.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\r\\npragma solidity >=0.8.0 <0.9.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"./IOracle.sol\\\";\\r\\nimport \\\"./IDEX.sol\\\";\\r\\n\\r\\ninterface IWAVAX {\\r\\n    function deposit() external payable;\\r\\n    function withdraw(uint256) external;\\r\\n}\\r\\n\\r\\ninterface IPangolinRouter {\\r\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\r\\n        uint amountIn,\\r\\n        uint amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external;\\r\\n    \\r\\n    function getAmountsIn(uint amountOut, address[] calldata path)\\r\\n        external\\r\\n        view\\r\\n        returns (uint[] memory amounts);\\r\\n}\\r\\n\\r\\n/**\\r\\n * Fund Contract - Manages individual index funds with weighted token allocations\\r\\n * @author Avanguard Index\\r\\n */\\r\\ncontract Fund is ERC20, Ownable {\\r\\n    // Fund metadata\\r\\n    string public fundName;\\r\\n    string public fundTicker;\\r\\n    address[] public underlyingTokens;\\r\\n    address public creator;\\r\\n    address public oracle;\\r\\n    address public dex;\\r\\n    address public wavax;\\r\\n\\r\\n    \\r\\n    // Token balance tracking\\r\\n    mapping(address => uint256) public tokenBalances;\\r\\n    \\r\\n    // Token weightage tracking (in basis points, 100% = 10000)\\r\\n    mapping(address => uint256) public tokenWeightages;\\r\\n    uint256 public totalWeightage;\\r\\n    \\r\\n    // Fee structure (1% = 100 basis points)\\r\\n    uint256 public constant FEE_BASIS_POINTS = 100; // 1%\\r\\n    uint256 public constant BASIS_POINTS_DENOMINATOR = 10000;\\r\\n    uint256 public constant SLIPPAGE_BUFFER_BASIS_POINTS = 200; // 2%\\r\\n    \\r\\n    // Fee distribution percentages\\r\\n    uint256 public constant CREATOR_FEE_PERCENT = 50; // 50% to creator\\r\\n    uint256 public constant AGI_BUYBACK_PERCENT = 25; // 25% to AGI buyback\\r\\n    uint256 public constant TREASURY_PERCENT = 25;    // 25% to treasury\\r\\n    \\r\\n    // Treasury address\\r\\n    address public treasury;\\r\\n    \\r\\n    // Events\\r\\n    event FundTokenBought(address indexed buyer, uint256 avaxAmount, uint256 fundTokensMinted, uint256 feePaid);\\r\\n    event FundTokenSold(address indexed seller, uint256 fundTokensBurned, uint256 avaxReturned, uint256 feePaid);\\r\\n    event FeesDistributed(uint256 creatorFee, uint256 agiBuybackFee, uint256 treasuryFee);\\r\\n    event WeightagesUpdated(address[] tokens, uint256[] weightages);\\r\\n    \\r\\n    constructor(\\r\\n        string memory _fundName,\\r\\n        string memory _fundTicker,\\r\\n        address[] memory _underlyingTokens,\\r\\n        uint256[] memory _tokenWeightages,\\r\\n        address _creator,\\r\\n        address _oracle,\\r\\n        address _treasury,\\r\\n        address _dex,\\r\\n        address _wavax\\r\\n    ) ERC20(_fundName, _fundTicker) Ownable(_creator) {\\r\\n        require(_underlyingTokens.length == _tokenWeightages.length, \\\"Tokens and weightages length mismatch\\\");\\r\\n        require(_underlyingTokens.length > 0, \\\"Must have at least one token\\\");\\r\\n        \\r\\n        fundName = _fundName;\\r\\n        fundTicker = _fundTicker;\\r\\n        underlyingTokens = _underlyingTokens;\\r\\n        creator = _creator;\\r\\n        oracle = _oracle;\\r\\n        treasury = _treasury;\\r\\n        dex = _dex;\\r\\n        wavax = _wavax;\\r\\n        \\r\\n        // Set weightages and validate total is 100%\\r\\n        uint256 totalWeight = 0;\\r\\n        for (uint256 i = 0; i < _underlyingTokens.length; i++) {\\r\\n            require(_tokenWeightages[i] > 0, \\\"Weightage must be greater than 0\\\");\\r\\n            tokenWeightages[_underlyingTokens[i]] = _tokenWeightages[i];\\r\\n            totalWeight += _tokenWeightages[i];\\r\\n        }\\r\\n        require(totalWeight == BASIS_POINTS_DENOMINATOR, \\\"Total weightage must be 100%\\\");\\r\\n        totalWeightage = totalWeight;\\r\\n        \\r\\n        _transferOwnership(_creator);\\r\\n    }\\r\\n\\r\\n    function swapExactTokensForTokens(\\r\\n        address fromToken,\\r\\n        address toToken,\\r\\n        uint256 amountIn\\r\\n    ) internal returns (uint256 tokensOut) {\\r\\n        require(dex != address(0), \\\"DEX not set\\\");\\r\\n        require(amountIn > 0, \\\"Amount must be > 0\\\");\\r\\n\\r\\n        IERC20(fromToken).approve(dex, amountIn);\\r\\n\\r\\n        address[] memory path = new address[](2);\\r\\n        path[0] = fromToken;\\r\\n        path[1] = toToken;\\r\\n\\r\\n        uint256 balanceBefore = IERC20(toToken).balanceOf(address(this));\\r\\n\\r\\n        IPangolinRouter(dex).swapExactTokensForTokensSupportingFeeOnTransferTokens(\\r\\n            amountIn,\\r\\n            1, // amountOutMin (you can adjust for slippage)\\r\\n            path,\\r\\n            address(this),\\r\\n            block.timestamp + 1200 // 20 minutes\\r\\n        );\\r\\n\\r\\n        uint256 balanceAfter = IERC20(toToken).balanceOf(address(this));\\r\\n        tokensOut = balanceAfter - balanceBefore;\\r\\n    }\\r\\n\\r\\n\\r\\n    \\r\\n    /**\\r\\n     * @dev Buy fund tokens with AVAX\\r\\n     */\\r\\n    function buy() external payable {\\r\\n        require(msg.value > 0, \\\"Must send AVAX\\\");\\r\\n        require(underlyingTokens.length > 0, \\\"No underlying tokens\\\");\\r\\n        \\r\\n        uint256 fee = (msg.value * FEE_BASIS_POINTS) / BASIS_POINTS_DENOMINATOR;\\r\\n        uint256 remainingAmount = msg.value - fee;\\r\\n        \\r\\n        // Calculate how many fund tokens to mint based on current fund value\\r\\n        uint256 fundTokensToMint = calculateFundTokensToMint(remainingAmount);\\r\\n        \\r\\n        // Mint fund tokens to buyer\\r\\n        _mint(msg.sender, fundTokensToMint);\\r\\n        \\r\\n        // Distribute fees\\r\\n        distributeFees(fee);\\r\\n        \\r\\n        // Buy underlying tokens with remaining AVAX\\r\\n        IWAVAX(wavax).deposit{value: remainingAmount}();\\r\\n        buyUnderlyingTokens(IERC20(wavax).balanceOf(address(this)));\\r\\n        \\r\\n        emit FundTokenBought(msg.sender, msg.value, fundTokensToMint, fee);\\r\\n    }\\r\\n\\r\\n\\r\\n\\r\\nfunction buyUnderlyingTokens(uint256 wavaxAmount) internal {\\r\\n    require(wavaxAmount > 0, \\\"Amount must be greater than 0\\\");\\r\\n    require(dex != address(0), \\\"DEX not set\\\");\\r\\n\\r\\n    uint256 amountPerToken = wavaxAmount / underlyingTokens.length;\\r\\n\\r\\n    for (uint256 i = 0; i < underlyingTokens.length; i++) {\\r\\n        address token = underlyingTokens[i];\\r\\n        \\r\\n        if (amountPerToken > 0) {\\r\\n            address[] memory path = new address[](2);\\r\\n            path[0] = wavax;\\r\\n            path[1] = token;\\r\\n\\r\\n            IERC20(wavax).approve(dex, amountPerToken);\\r\\n            uint256 balanceBefore = IERC20(token).balanceOf(address(this));\\r\\n            \\r\\n            try IPangolinRouter(dex).swapExactTokensForTokensSupportingFeeOnTransferTokens(\\r\\n                amountPerToken,\\r\\n                1, // amountOutMin\\r\\n                path,\\r\\n                address(this),\\r\\n                block.timestamp + 1200\\r\\n            ) {\\r\\n                uint256 balanceAfter = IERC20(token).balanceOf(address(this));\\r\\n                uint256 tokensReceived = balanceAfter - balanceBefore;\\r\\n                tokenBalances[token] += tokensReceived;\\r\\n            } catch {\\r\\n                // If swap fails, just continue to the next token\\r\\n                continue;\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\\r\\n\\r\\n    \\r\\nfunction sellUnderlyingTokens(uint256 sellPercentage) internal returns (uint256 totalAvaxReceived) {\\r\\n    require(dex != address(0), \\\"DEX not set\\\");\\r\\n    require(sellPercentage > 0, \\\"Sell percentage must be greater than 0\\\");\\r\\n\\r\\n    totalAvaxReceived = 0;\\r\\n\\r\\n    for (uint256 i = 0; i < underlyingTokens.length; i++) {\\r\\n        address token = underlyingTokens[i];\\r\\n        uint256 tokenBalance = tokenBalances[token];\\r\\n\\r\\n        if (tokenBalance > 0) {\\r\\n            uint256 tokensToSell = (tokenBalance * sellPercentage) / 1e18;\\r\\n            if (tokensToSell == 0) continue;\\r\\n\\r\\n            address[] memory path = new address[](2);\\r\\n            path[0] = token;\\r\\n            path[1] = wavax;\\r\\n\\r\\n            IERC20(token).approve(dex, tokensToSell);\\r\\n\\r\\n            uint256 wavaxBefore = IERC20(wavax).balanceOf(address(this));\\r\\n\\r\\n            IPangolinRouter(dex).swapExactTokensForTokensSupportingFeeOnTransferTokens(\\r\\n                tokensToSell,\\r\\n                1, // amountOutMin\\r\\n                path,\\r\\n                address(this),\\r\\n                block.timestamp + 1200\\r\\n            );\\r\\n\\r\\n            uint256 wavaxAfter = IERC20(wavax).balanceOf(address(this));\\r\\n            uint256 wavaxReceived = wavaxAfter - wavaxBefore;\\r\\n\\r\\n            if (wavaxReceived > 0) {\\r\\n                IWAVAX(wavax).withdraw(wavaxReceived); // unwrap WAVAX \\u2192 AVAX\\r\\n                totalAvaxReceived += wavaxReceived;\\r\\n                tokenBalances[token] -= tokensToSell;\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    return totalAvaxReceived;\\r\\n}\\r\\n\\r\\n    /**\\r\\n     * @dev Sell fund tokens for AVAX\\r\\n     * @param fundTokenAmount Amount of fund tokens to sell\\r\\n     */\\r\\n    function sell(uint256 fundTokenAmount) external {\\r\\n        require(fundTokenAmount > 0, \\\"Amount must be greater than 0\\\");\\r\\n        require(balanceOf(msg.sender) >= fundTokenAmount, \\\"Insufficient fund tokens\\\");\\r\\n        require(totalSupply() > 0, \\\"No fund tokens in circulation\\\");\\r\\n        \\r\\n        // Calculate the percentage of fund tokens being sold\\r\\n        uint256 sellPercentage = (fundTokenAmount * 1e18) / totalSupply(); // 18 decimals for precision\\r\\n        \\r\\n        // Sell underlying tokens proportionally and get total AVAX received\\r\\n        uint256 totalAvaxReceived = sellUnderlyingTokens(sellPercentage);\\r\\n        require(totalAvaxReceived > 0, \\\"No value to return\\\");\\r\\n        \\r\\n        // Calculate fee (1%)\\r\\n        uint256 fee = (totalAvaxReceived * FEE_BASIS_POINTS) / BASIS_POINTS_DENOMINATOR;\\r\\n        uint256 avaxToReturn = totalAvaxReceived - fee;\\r\\n        \\r\\n        // Burn fund tokens\\r\\n        _burn(msg.sender, fundTokenAmount);\\r\\n        \\r\\n        // Distribute fees\\r\\n        distributeFees(fee);\\r\\n        \\r\\n        // Transfer AVAX to seller\\r\\n        (bool success, ) = payable(msg.sender).call{value: avaxToReturn}(\\\"\\\");\\r\\n        require(success, \\\"Failed to transfer AVAX\\\");\\r\\n        \\r\\n        emit FundTokenSold(msg.sender, fundTokenAmount, avaxToReturn, fee);\\r\\n    }\\r\\n\\r\\n\\r\\n\\r\\n// function swapTokensForAvax(address token, uint256 amount) internal returns (uint256 avaxReceived) {\\r\\n//     require(dex != address(0), \\\"DEX not set\\\");\\r\\n\\r\\n//     IERC20(token).approve(dex, amount);\\r\\n\\r\\n//     address[] memory path = new address[](2);\\r\\n//     path[0] = token;\\r\\n//     path[1] = wavax;\\r\\n\\r\\n//     uint256 balanceBefore = address(this).balance;\\r\\n\\r\\n//     IPangolinRouter(dex).swapExactTokensForTokensSupportingFeeOnTransferTokens(\\r\\n//         amount,\\r\\n//         1,\\r\\n//         path,\\r\\n//         address(this),\\r\\n//         block.timestamp + 1200\\r\\n//     );\\r\\n\\r\\n//     // unwrap WAVAX to AVAX\\r\\n//     uint256 wavaxBalance = IERC20(wavax).balanceOf(address(this));\\r\\n//     IWAVAX(wavax).withdraw(wavaxBalance);\\r\\n\\r\\n//     uint256 balanceAfter = address(this).balance;\\r\\n//     avaxReceived = balanceAfter - balanceBefore;\\r\\n// }\\r\\n\\r\\n//     /**\\r\\n//      * @dev Swap AVAX for tokens using DEX\\r\\n//      * @param token The token address to receive\\r\\n//      * @param avaxAmount The amount of AVAX to swap\\r\\n//      * @return tokensReceived The amount of tokens received\\r\\n//      */\\r\\n//     function swapAvaxForTokens(address token, uint256 avaxAmount) internal returns (uint256 tokensReceived) {\\r\\n//         require(dex != address(0), \\\"DEX not set\\\");\\r\\n//         require(avaxAmount > 0, \\\"Amount must be greater than 0\\\");\\r\\n        \\r\\n//         // Get the expected token output from DEX\\r\\n//         uint256 expectedTokens = IDEX(dex).getAmountsOut(address(0), avaxAmount);\\r\\n//         require(expectedTokens > 0, \\\"No token value for AVAX\\\");\\r\\n        \\r\\n//         // Call the DEX swap function with AVAX value\\r\\n//         // Note: In a real implementation, this would require the contract to have AVAX balance\\r\\n//         // For now, we'll simulate the swap by returning the expected value\\r\\n//         // The actual DEX integration would be: IDEX(dex).swapExactAVAXForTokens{value: avaxAmount}(token, expectedTokens, address(this), block.timestamp)\\r\\n//         tokensReceived = expectedTokens;\\r\\n        \\r\\n//         return tokensReceived;\\r\\n//     }\\r\\n    \\r\\n    /**\\r\\n     * @dev Get current fund value in AVAX\\r\\n     * @return Total fund value in AVAX\\r\\n     */\\r\\n    function getCurrentFundValue() external view returns (uint256) {\\r\\n        if (totalSupply() == 0) return 0;\\r\\n        \\r\\n        uint256 totalValue = 0;\\r\\n        for (uint256 i = 0; i < underlyingTokens.length; i++) {\\r\\n            address token = underlyingTokens[i];\\r\\n            uint256 tokenBalance = tokenBalances[token];\\r\\n            \\r\\n            if (tokenBalance > 0) {\\r\\n                // Convert token balance to AVAX value using oracle prices\\r\\n                uint256 tokenPriceUSD = IOracle(oracle).getPrice(token);\\r\\n                uint256 avaxPriceUSD = IOracle(oracle).getPrice(address(0));\\r\\n                \\r\\n                if (tokenPriceUSD > 0 && avaxPriceUSD > 0) {\\r\\n                    // Calculate token value in USD\\r\\n                    uint256 tokenValueUSD = (tokenBalance * tokenPriceUSD) / 1e8;\\r\\n                    // Convert USD value to AVAX\\r\\n                    uint256 tokenValueInAvax = (tokenValueUSD * 1e8) / avaxPriceUSD;\\r\\n                    totalValue += tokenValueInAvax;\\r\\n                } else {\\r\\n                    // Fallback: use token balance as AVAX value\\r\\n                    totalValue += tokenBalance;\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n        return totalValue;\\r\\n    }\\r\\n    \\r\\n    /**\\r\\n     * @dev Get current fund value in USD\\r\\n     * @return Total fund value in USD (18 decimals)\\r\\n     */\\r\\n    function getCurrentFundValueUSD() internal view returns (uint256) {\\r\\n        if (totalSupply() == 0) return 0;\\r\\n        \\r\\n        uint256 totalValueUSD = 0;\\r\\n        for (uint256 i = 0; i < underlyingTokens.length; i++) {\\r\\n            address token = underlyingTokens[i];\\r\\n            uint256 tokenBalance = tokenBalances[token];\\r\\n            \\r\\n            if (tokenBalance > 0) {\\r\\n                uint256 tokenPriceUSD = IOracle(oracle).getPrice(token);\\r\\n                // Calculate token value in USD\\r\\n                uint256 tokenValueUSD = (tokenBalance * tokenPriceUSD) / 1e8;\\r\\n                totalValueUSD += tokenValueUSD;\\r\\n            }\\r\\n        }\\r\\n        return totalValueUSD;\\r\\n    }\\r\\n    \\r\\n    /**\\r\\n     * @dev Get fund token balance for a specific address\\r\\n     * @param user Address to check balance for\\r\\n     * @return Fund token balance\\r\\n     */\\r\\n    function fundTokenBalanceOf(address user) external view returns (uint256) {\\r\\n        return balanceOf(user);\\r\\n    }\\r\\n    \\r\\n    /**\\r\\n     * @dev Calculate how many fund tokens to mint for given AVAX amount\\r\\n     * @param avaxAmount Amount of AVAX to invest\\r\\n     * @return Fund tokens to mint\\r\\n     */\\r\\n    function calculateFundTokensToMint(uint256 avaxAmount) internal view returns (uint256) {\\r\\n        if (totalSupply() == 0) {\\r\\n            // First investment - mint tokens 1:1 with avax amount\\r\\n            return avaxAmount;\\r\\n        }\\r\\n        \\r\\n        // Apply a buffer to the investment amount to account for potential slippage on asset purchase\\r\\n        uint256 effectiveAvaxAmount = (avaxAmount * (BASIS_POINTS_DENOMINATOR - SLIPPAGE_BUFFER_BASIS_POINTS))\\r\\n            / BASIS_POINTS_DENOMINATOR;\\r\\n\\r\\n        // Get AVAX price in USD (8 decimals)\\r\\n        uint256 avaxPriceUSD = IOracle(oracle).getPrice(address(0));\\r\\n        \\r\\n        // Convert AVAX amount to USD value (18 decimals for AVAX, 8 decimals for price)\\r\\n        // avaxAmount * avaxPriceUSD / 10^8 = USD value with 18 decimals\\r\\n        uint256 avaxValueUSD = (effectiveAvaxAmount * avaxPriceUSD) / 1e8;\\r\\n        \\r\\n        // Get current fund value in USD\\r\\n        uint256 currentFundValueUSD = getCurrentFundValueUSD();\\r\\n        \\r\\n        // Calculate fund tokens to mint based on USD proportion\\r\\n        // (avaxValueUSD * totalSupply) / currentFundValueUSD\\r\\n        return (avaxValueUSD * totalSupply()) / currentFundValueUSD;\\r\\n    }\\r\\n    \\r\\n    /**\\r\\n     * @dev Calculate AVAX value for given fund token amount\\r\\n     * @param fundTokenAmount Amount of fund tokens\\r\\n     * @return AVAX value\\r\\n     */\\r\\n    function calculateAvaxValue(uint256 fundTokenAmount) internal view returns (uint256) {\\r\\n        if (totalSupply() == 0) return 0;\\r\\n        \\r\\n        uint256 currentFundValue = this.getCurrentFundValue();\\r\\n        return (fundTokenAmount * currentFundValue) / totalSupply();\\r\\n    }\\r\\n    \\r\\n    /**\\r\\n     * @dev Distribute fees to creator, AGI buyback, and treasury\\r\\n     * @param totalFee Total fee amount to distribute\\r\\n     */\\r\\n    function distributeFees(uint256 totalFee) internal {\\r\\n        uint256 creatorFee = (totalFee * CREATOR_FEE_PERCENT) / 100;\\r\\n        uint256 agiBuybackFee = (totalFee * AGI_BUYBACK_PERCENT) / 100;\\r\\n        uint256 treasuryFee = (totalFee * TREASURY_PERCENT) / 100;\\r\\n        \\r\\n        // Send to creator\\r\\n        if (creatorFee > 0) {\\r\\n            (bool success1, ) = payable(creator).call{value: creatorFee}(\\\"\\\");\\r\\n            require(success1, \\\"Failed to send creator fee\\\");\\r\\n        }\\r\\n        \\r\\n        // Send to treasury (AGI buyback will be handled by treasury)\\r\\n        if (agiBuybackFee + treasuryFee > 0) {\\r\\n            (bool success2, ) = payable(treasury).call{value: agiBuybackFee + treasuryFee}(\\\"\\\");\\r\\n            require(success2, \\\"Failed to send treasury fee\\\");\\r\\n        }\\r\\n        \\r\\n        emit FeesDistributed(creatorFee, agiBuybackFee, treasuryFee);\\r\\n    }\\r\\n    \\r\\n    /**\\r\\n     * @dev Get underlying tokens array\\r\\n     * @return Array of underlying token addresses\\r\\n     */\\r\\n    function getUnderlyingTokens() external view returns (address[] memory) {\\r\\n        return underlyingTokens;\\r\\n    }\\r\\n    \\r\\n    /**\\r\\n     * @dev Update treasury address (only owner)\\r\\n     * @param newTreasury New treasury address\\r\\n     */\\r\\n    function updateTreasury(address newTreasury) external onlyOwner {\\r\\n        require(newTreasury != address(0), \\\"Invalid treasury address\\\");\\r\\n        treasury = newTreasury;\\r\\n    }\\r\\n    \\r\\n    /**\\r\\n     * @dev Update oracle address (only owner)\\r\\n     * @param newOracle New oracle address\\r\\n     */\\r\\n    function updateOracle(address newOracle) external onlyOwner {\\r\\n        require(newOracle != address(0), \\\"Invalid oracle address\\\");\\r\\n        oracle = newOracle;\\r\\n    }\\r\\n    \\r\\n    /**\\r\\n     * @dev Update DEX address (only owner)\\r\\n     * @param newDex New DEX address\\r\\n     */\\r\\n    function updateDex(address newDex) external onlyOwner {\\r\\n        require(newDex != address(0), \\\"Invalid DEX address\\\");\\r\\n        dex = newDex;\\r\\n    }\\r\\n    \\r\\n    /**\\r\\n     * @dev Rebalance fund by updating weightages and swapping tokens accordingly (only owner)\\r\\n     * @param tokens Array of token addresses\\r\\n     * @param weightages Array of weightages (in basis points)\\r\\n     */\\r\\n    function rebalance(address[] memory tokens, uint256[] memory weightages) external onlyOwner {\\r\\n        require(tokens.length == weightages.length, \\\"Tokens and weightages length mismatch\\\");\\r\\n        require(tokens.length > 0, \\\"Must have at least one token\\\");\\r\\n        require(dex != address(0), \\\"DEX not set\\\");\\r\\n        \\r\\n        uint256 totalWeight = 0;\\r\\n        for (uint256 i = 0; i < tokens.length; i++) {\\r\\n            require(weightages[i] > 0, \\\"Weightage must be greater than 0\\\");\\r\\n            totalWeight += weightages[i];\\r\\n        }\\r\\n        require(totalWeight == BASIS_POINTS_DENOMINATOR, \\\"Total weightage must be 100%\\\");\\r\\n        \\r\\n        // Get current fund value in AVAX\\r\\n        uint256 currentFundValue = this.getCurrentFundValue();\\r\\n        require(currentFundValue > 0, \\\"No fund value to rebalance\\\");\\r\\n        \\r\\n        // Validate that all tokens have valid prices before proceeding\\r\\n        for (uint256 i = 0; i < tokens.length; i++) {\\r\\n            uint256 tokenPrice = IOracle(oracle).getPrice(tokens[i]);\\r\\n            require(tokenPrice > 0, \\\"Invalid token price\\\");\\r\\n        }\\r\\n        uint256 avaxPrice = IOracle(oracle).getPrice(address(0));\\r\\n        require(avaxPrice > 0, \\\"Invalid AVAX price\\\");\\r\\n        \\r\\n        // Calculate target token balances based on new weightages\\r\\n        uint256[] memory targetBalances = new uint256[](tokens.length);\\r\\n        for (uint256 i = 0; i < tokens.length; i++) {\\r\\n            address token = tokens[i];\\r\\n            uint256 targetValue = (currentFundValue * weightages[i]) / BASIS_POINTS_DENOMINATOR;\\r\\n            \\r\\n            // Convert AVAX value to token amount using oracle prices\\r\\n            uint256 tokenPriceUSD = IOracle(oracle).getPrice(token);\\r\\n            uint256 avaxPriceUSD = IOracle(oracle).getPrice(address(0));\\r\\n            \\r\\n            // Calculate token amount: (targetValue * avaxPriceUSD) / tokenPriceUSD\\r\\n            targetBalances[i] = (targetValue * avaxPriceUSD) / tokenPriceUSD;\\r\\n        }\\r\\n        \\r\\n        // Perform rebalancing using IPangolinRouter\\r\\n        for (uint256 i = 0; i < tokens.length; i++) {\\r\\n            address token = tokens[i];\\r\\n            uint256 currentBalance = tokenBalances[token];\\r\\n            uint256 targetBalance = targetBalances[i];\\r\\n            \\r\\n            if (currentBalance != targetBalance) {\\r\\n                if (currentBalance > targetBalance) {\\r\\n                    // Need to sell excess tokens\\r\\n                    uint256 tokensToSell = currentBalance - targetBalance;\\r\\n                    if (tokensToSell > 0) {\\r\\n                        // Sell tokens for WAVAX\\r\\n                        uint256 wavaxReceived = swapTokensForWavax(token, tokensToSell);\\r\\n                        if (wavaxReceived > 0) {\\r\\n                            // Update balance\\r\\n                            tokenBalances[token] = targetBalance;\\r\\n                        }\\r\\n                    }\\r\\n                } else if (targetBalance > currentBalance) {\\r\\n                    // Need to buy more tokens\\r\\n                    uint256 tokensToBuy = targetBalance - currentBalance;\\r\\n                    if (tokensToBuy > 0) {\\r\\n                        // Calculate WAVAX needed for the purchase\\r\\n                        uint256 wavaxNeeded = calculateWavaxNeededForTokens(token, tokensToBuy);\\r\\n                        if (wavaxNeeded > 0 && IERC20(wavax).balanceOf(address(this)) >= wavaxNeeded) {\\r\\n                            // Buy tokens with WAVAX\\r\\n                            uint256 tokensReceived = swapWavaxForTokens(token, wavaxNeeded);\\r\\n                            if (tokensReceived > 0) {\\r\\n                                // Update balance\\r\\n                                tokenBalances[token] = currentBalance + tokensReceived;\\r\\n                            }\\r\\n                        }\\r\\n                    }\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n        \\r\\n        // Update weightages in state\\r\\n        for (uint256 i = 0; i < tokens.length; i++) {\\r\\n            tokenWeightages[tokens[i]] = weightages[i];\\r\\n        }\\r\\n        totalWeightage = totalWeight;\\r\\n        \\r\\n        emit WeightagesUpdated(tokens, weightages);\\r\\n    }\\r\\n    \\r\\n    /**\\r\\n     * @dev Get token balance for a specific token\\r\\n     * @param token The token address\\r\\n     * @return balance The token balance\\r\\n     */\\r\\n    function getTokenBalance(address token) external view returns (uint256) {\\r\\n        return tokenBalances[token];\\r\\n    }\\r\\n    \\r\\n    /**\\r\\n     * @dev Get weightage for a specific token\\r\\n     * @param token The token address\\r\\n     * @return weightage The token weightage in basis points\\r\\n     */\\r\\n    function getTokenWeightage(address token) external view returns (uint256) {\\r\\n        return tokenWeightages[token];\\r\\n    }\\r\\n    \\r\\n    /**\\r\\n     * @dev Get all token weightages\\r\\n     * @return tokens Array of token addresses\\r\\n     * @return weightages Array of corresponding weightages\\r\\n     */\\r\\n    function getAllTokenWeightages() external view returns (address[] memory tokens, uint256[] memory weightages) {\\r\\n        tokens = underlyingTokens;\\r\\n        weightages = new uint256[](underlyingTokens.length);\\r\\n        \\r\\n        for (uint256 i = 0; i < underlyingTokens.length; i++) {\\r\\n            weightages[i] = tokenWeightages[underlyingTokens[i]];\\r\\n        }\\r\\n        \\r\\n        return (tokens, weightages);\\r\\n    }\\r\\n    \\r\\n    /**\\r\\n     * @dev Get fund composition (tokens and their current balances)\\r\\n     * @return tokens Array of token addresses\\r\\n     * @return balances Array of corresponding balances\\r\\n     * @return weightages Array of corresponding weightages\\r\\n     */\\r\\n    function getFundComposition() external view returns (\\r\\n        address[] memory tokens,\\r\\n        uint256[] memory balances,\\r\\n        uint256[] memory weightages\\r\\n    ) {\\r\\n        tokens = underlyingTokens;\\r\\n        balances = new uint256[](underlyingTokens.length);\\r\\n        weightages = new uint256[](underlyingTokens.length);\\r\\n        \\r\\n        for (uint256 i = 0; i < underlyingTokens.length; i++) {\\r\\n            balances[i] = tokenBalances[underlyingTokens[i]];\\r\\n            weightages[i] = tokenWeightages[underlyingTokens[i]];\\r\\n        }\\r\\n        \\r\\n        return (tokens, balances, weightages);\\r\\n    }\\r\\n    \\r\\n    /**\\r\\n     * @dev Validate that all weightages sum to 100%\\r\\n     * @return isValid True if weightages are valid\\r\\n     */\\r\\n    function validateWeightages() external view returns (bool isValid) {\\r\\n        uint256 totalWeight = 0;\\r\\n        for (uint256 i = 0; i < underlyingTokens.length; i++) {\\r\\n            totalWeight += tokenWeightages[underlyingTokens[i]];\\r\\n        }\\r\\n        return totalWeight == BASIS_POINTS_DENOMINATOR;\\r\\n    }\\r\\n    \\r\\n    /**\\r\\n     * @dev Swap tokens for WAVAX using IPangolinRouter\\r\\n     * @param token The token to sell\\r\\n     * @param amount The amount of tokens to sell\\r\\n     * @return wavaxReceived The amount of WAVAX received\\r\\n     */\\r\\n    function swapTokensForWavax(address token, uint256 amount) internal returns (uint256 wavaxReceived) {\\r\\n        require(dex != address(0), \\\"DEX not set\\\");\\r\\n        require(amount > 0, \\\"Amount must be greater than 0\\\");\\r\\n\\r\\n        IERC20(token).approve(dex, amount);\\r\\n\\r\\n        address[] memory path = new address[](2);\\r\\n        path[0] = token;\\r\\n        path[1] = wavax;\\r\\n\\r\\n        uint256 balanceBefore = IERC20(wavax).balanceOf(address(this));\\r\\n\\r\\n        IPangolinRouter(dex).swapExactTokensForTokensSupportingFeeOnTransferTokens(\\r\\n            amount,\\r\\n            1, // amountOutMin\\r\\n            path,\\r\\n            address(this),\\r\\n            block.timestamp + 1200\\r\\n        );\\r\\n\\r\\n        uint256 balanceAfter = IERC20(wavax).balanceOf(address(this));\\r\\n        wavaxReceived = balanceAfter - balanceBefore;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Swap WAVAX for tokens using IPangolinRouter\\r\\n     * @param token The token to buy\\r\\n     * @param wavaxAmount The amount of WAVAX to spend\\r\\n     * @return tokensReceived The amount of tokens received\\r\\n     */\\r\\n    function swapWavaxForTokens(address token, uint256 wavaxAmount) internal returns (uint256 tokensReceived) {\\r\\n        require(dex != address(0), \\\"DEX not set\\\");\\r\\n        require(wavaxAmount > 0, \\\"Amount must be greater than 0\\\");\\r\\n\\r\\n        IERC20(wavax).approve(dex, wavaxAmount);\\r\\n\\r\\n        address[] memory path = new address[](2);\\r\\n        path[0] = wavax;\\r\\n        path[1] = token;\\r\\n\\r\\n        uint256 balanceBefore = IERC20(token).balanceOf(address(this));\\r\\n\\r\\n        IPangolinRouter(dex).swapExactTokensForTokensSupportingFeeOnTransferTokens(\\r\\n            wavaxAmount,\\r\\n            1, // amountOutMin\\r\\n            path,\\r\\n            address(this),\\r\\n            block.timestamp + 1200\\r\\n        );\\r\\n\\r\\n        uint256 balanceAfter = IERC20(token).balanceOf(address(this));\\r\\n        tokensReceived = balanceAfter - balanceBefore;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Calculate WAVAX needed for a specific amount of tokens\\r\\n     * @param token The token address\\r\\n     * @param tokenAmount The amount of tokens needed\\r\\n     * @return wavaxNeeded The amount of WAVAX needed\\r\\n     */\\r\\n    function calculateWavaxNeededForTokens(address token, uint256 tokenAmount) internal view returns (uint256 wavaxNeeded) {\\r\\n        require(dex != address(0), \\\"DEX not set\\\");\\r\\n        require(tokenAmount > 0, \\\"Token amount must be greater than 0\\\");\\r\\n\\r\\n        address[] memory path = new address[](2);\\r\\n        path[0] = wavax;\\r\\n        path[1] = token;\\r\\n\\r\\n        try IPangolinRouter(dex).getAmountsIn(tokenAmount, path) returns (uint[] memory amounts) {\\r\\n            if (amounts.length > 0) {\\r\\n                wavaxNeeded = amounts[0];\\r\\n            }\\r\\n        } catch {\\r\\n            // If calculation fails, use oracle prices as fallback\\r\\n            uint256 tokenPriceUSD = IOracle(oracle).getPrice(token);\\r\\n            uint256 avaxPriceUSD = IOracle(oracle).getPrice(address(0));\\r\\n            \\r\\n            if (tokenPriceUSD > 0 && avaxPriceUSD > 0) {\\r\\n                wavaxNeeded = (tokenAmount * tokenPriceUSD) / avaxPriceUSD;\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Allow contract to receive AVAX\\r\\n     */\\r\\n    receive() external payable {}\\r\\n}\\r\\n\",\"keccak256\":\"0x0d85867a0f3bd686793d9b6395f076b62913cbb205a0668371da62881b954ada\",\"license\":\"MIT\"},\"contracts/FundFactory.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\r\\npragma solidity >=0.8.0 <0.9.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"./Fund.sol\\\";\\r\\nimport \\\"./AGIToken.sol\\\";\\r\\n\\r\\n/**\\r\\n * Fund Factory Contract - Creates and manages index funds\\r\\n * @author Avanguard Index\\r\\n */\\r\\ncontract FundFactory is Ownable {\\r\\n    // Fund creation fee in AGI tokens\\r\\n    uint256 public constant FUND_CREATION_FEE = 1000 * 10**18; // 1000 AGI tokens\\r\\n    \\r\\n    // Contracts\\r\\n    AGIToken public agiToken;\\r\\n    address public oracle;\\r\\n    address public treasury;\\r\\n    address public dex;\\r\\n    address public wavax;\\r\\n    \\r\\n    // Fund tracking\\r\\n    Fund[] public funds;\\r\\n    mapping(uint256 => Fund) public fundById;\\r\\n    mapping(address => uint256[]) public creatorFunds;\\r\\n    \\r\\n    // Events\\r\\n    event FundCreated(\\r\\n        uint256 indexed fundId,\\r\\n        address indexed creator,\\r\\n        string fundName,\\r\\n        string fundTicker,\\r\\n        address fundAddress,\\r\\n        address[] underlyingTokens\\r\\n    );\\r\\n    \\r\\n    constructor(\\r\\n        address _agiToken,\\r\\n        address _oracle,\\r\\n        address _treasury,\\r\\n        address _dex,\\r\\n        address _wavax,\\r\\n        address initialOwner\\r\\n    ) Ownable(initialOwner) {\\r\\n        agiToken = AGIToken(_agiToken);\\r\\n        oracle = _oracle;\\r\\n        treasury = _treasury;\\r\\n        dex = _dex;\\r\\n        wavax = _wavax;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the fund creation fee.\\r\\n     */\\r\\n    function creationFee() external pure returns (uint256) {\\r\\n        return FUND_CREATION_FEE;\\r\\n    }\\r\\n    \\r\\n    /**\\r\\n     * @dev Create a new fund\\r\\n     * @param fundName Name of the fund\\r\\n     * @param fundTicker Ticker symbol for the fund\\r\\n     * @param tokens Array of underlying token addresses\\r\\n     * @param weightages Array of token weightages (in basis points, 100% = 10000)\\r\\n     */\\r\\n    function createFund(\\r\\n        string memory fundName,\\r\\n        string memory fundTicker,\\r\\n        address[] memory tokens,\\r\\n        uint256[] memory weightages\\r\\n    ) external {\\r\\n        require(bytes(fundName).length > 0, \\\"Fund name cannot be empty\\\");\\r\\n        require(bytes(fundTicker).length > 0, \\\"Fund ticker cannot be empty\\\");\\r\\n        require(tokens.length > 0, \\\"Must have at least one token\\\");\\r\\n        require(tokens.length <= 20, \\\"Maximum 20 tokens per fund\\\");\\r\\n        require(tokens.length == weightages.length, \\\"Tokens and weightages length mismatch\\\");\\r\\n        \\r\\n        // Check for duplicate tokens and validate weightages\\r\\n        uint256 totalWeightage = 0;\\r\\n        for (uint256 i = 0; i < tokens.length; i++) {\\r\\n            require(tokens[i] != address(0), \\\"Invalid token address\\\");\\r\\n            require(weightages[i] > 0, \\\"Weightage must be greater than 0\\\");\\r\\n            totalWeightage += weightages[i];\\r\\n            \\r\\n            for (uint256 j = i + 1; j < tokens.length; j++) {\\r\\n                require(tokens[i] != tokens[j], \\\"Duplicate tokens not allowed\\\");\\r\\n            }\\r\\n        }\\r\\n        require(totalWeightage == 10000, \\\"Total weightage must be 100%\\\");\\r\\n        \\r\\n        // Burn AGI tokens as creation fee\\r\\n        require(\\r\\n            agiToken.balanceOf(msg.sender) >= FUND_CREATION_FEE,\\r\\n            \\\"Insufficient AGI balance for fund creation fee\\\"\\r\\n        );\\r\\n        agiToken.burnFrom(msg.sender, FUND_CREATION_FEE);\\r\\n        \\r\\n        // Create new fund\\r\\n        Fund newFund = new Fund(\\r\\n            fundName,\\r\\n            fundTicker,\\r\\n            tokens,\\r\\n            weightages,\\r\\n            msg.sender,\\r\\n            oracle,\\r\\n            treasury,\\r\\n            dex,\\r\\n            wavax\\r\\n        );\\r\\n        \\r\\n        // Track the fund\\r\\n        uint256 fundId = funds.length;\\r\\n        funds.push(newFund);\\r\\n        fundById[fundId] = newFund;\\r\\n        creatorFunds[msg.sender].push(fundId);\\r\\n        \\r\\n        emit FundCreated(\\r\\n            fundId,\\r\\n            msg.sender,\\r\\n            fundName,\\r\\n            fundTicker,\\r\\n            address(newFund),\\r\\n            tokens\\r\\n        );\\r\\n    }\\r\\n    \\r\\n    /**\\r\\n     * @dev Get fund information by ID\\r\\n     * @param fundId The fund ID\\r\\n     * @return fundAddress The fund contract address\\r\\n     * @return fundName The fund name\\r\\n     * @return fundTicker The fund ticker\\r\\n     * @return underlyingTokens Array of underlying token addresses\\r\\n     * @return weightages Array of token weightages\\r\\n     */\\r\\n    function getFund(uint256 fundId) external view returns (\\r\\n        address fundAddress,\\r\\n        string memory fundName,\\r\\n        string memory fundTicker,\\r\\n        address[] memory underlyingTokens,\\r\\n        uint256[] memory weightages\\r\\n    ) {\\r\\n        require(fundId < funds.length, \\\"Fund does not exist\\\");\\r\\n        Fund fund = funds[fundId];\\r\\n        fundAddress = address(fund);\\r\\n        fundName = fund.fundName();\\r\\n        fundTicker = fund.fundTicker();\\r\\n        underlyingTokens = fund.getUnderlyingTokens();\\r\\n        ( , weightages) = fund.getAllTokenWeightages();\\r\\n    }\\r\\n    \\r\\n    /**\\r\\n     * @dev Get all funds created by a specific creator\\r\\n     * @param creator The creator address\\r\\n     * @return Array of fund IDs created by the creator\\r\\n     */\\r\\n    function getCreatorFunds(address creator) external view returns (uint256[] memory) {\\r\\n        return creatorFunds[creator];\\r\\n    }\\r\\n    \\r\\n    /**\\r\\n     * @dev Get total number of funds\\r\\n     * @return Total number of funds created\\r\\n     */\\r\\n    function getTotalFunds() external view returns (uint256) {\\r\\n        return funds.length;\\r\\n    }\\r\\n    \\r\\n    /**\\r\\n     * @dev Get all funds (for frontend pagination)\\r\\n     * @param startIndex Starting index\\r\\n     * @param endIndex Ending index\\r\\n     * @return Array of fund addresses\\r\\n     */\\r\\n    function getFunds(uint256 startIndex, uint256 endIndex) external view returns (address[] memory) {\\r\\n        require(startIndex < funds.length, \\\"Start index out of bounds\\\");\\r\\n        require(endIndex <= funds.length, \\\"End index out of bounds\\\");\\r\\n        require(startIndex <= endIndex, \\\"Invalid index range\\\");\\r\\n        \\r\\n        uint256 count = endIndex - startIndex;\\r\\n        address[] memory fundAddresses = new address[](count);\\r\\n        \\r\\n        for (uint256 i = 0; i < count; i++) {\\r\\n            fundAddresses[i] = address(funds[startIndex + i]);\\r\\n        }\\r\\n        \\r\\n        return fundAddresses;\\r\\n    }\\r\\n    \\r\\n    /**\\r\\n     * @dev Update oracle address (only owner)\\r\\n     * @param newOracle New oracle address\\r\\n     */\\r\\n    function updateOracle(address newOracle) external onlyOwner {\\r\\n        require(newOracle != address(0), \\\"Invalid oracle address\\\");\\r\\n        oracle = newOracle;\\r\\n    }\\r\\n    \\r\\n    /**\\r\\n     * @dev Update treasury address (only owner)\\r\\n     * @param newTreasury New treasury address\\r\\n     */\\r\\n    function updateTreasury(address newTreasury) external onlyOwner {\\r\\n        require(newTreasury != address(0), \\\"Invalid treasury address\\\");\\r\\n        treasury = newTreasury;\\r\\n    }\\r\\n    \\r\\n    /**\\r\\n     * @dev Update AGI token address (only owner)\\r\\n     * @param newAgiToken New AGI token address\\r\\n     */\\r\\n    function updateAgiToken(address newAgiToken) external onlyOwner {\\r\\n        require(newAgiToken != address(0), \\\"Invalid AGI token address\\\");\\r\\n        agiToken = AGIToken(newAgiToken);\\r\\n    }\\r\\n    \\r\\n    /**\\r\\n     * @dev Update DEX address (only owner)\\r\\n     * @param newDex New DEX address\\r\\n     */\\r\\n    function updateDex(address newDex) external onlyOwner {\\r\\n        require(newDex != address(0), \\\"Invalid DEX address\\\");\\r\\n        dex = newDex;\\r\\n    }\\r\\n    \\r\\n    /**\\r\\n     * @dev Update WAVAX address (only owner)\\r\\n     * @param newWavax New WAVAX address\\r\\n     */\\r\\n    function updateWavax(address newWavax) external onlyOwner {\\r\\n        require(newWavax != address(0), \\\"Invalid WAVAX address\\\");\\r\\n        wavax = newWavax;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x7685d268ea5f079ff419712e3b602ab7bc3a425e1a092ffe363cdf71a46bf186\",\"license\":\"MIT\"},\"contracts/IDEX.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\r\\npragma solidity >=0.8.0 <0.9.0;\\r\\n\\r\\n/**\\r\\n * DEX Interface for swapping tokens and AVAX\\r\\n * @author Avanguard Index\\r\\n */\\r\\ninterface IDEX {\\r\\n    /**\\r\\n     * @dev Swap tokens for AVAX\\r\\n     * @param tokenIn The token address to swap from\\r\\n     * @param amountIn The amount of tokens to swap\\r\\n     * @param amountOutMin The minimum amount of AVAX to receive\\r\\n     * @param to The address to receive the AVAX\\r\\n     * @param deadline The deadline for the swap\\r\\n     * @return amountOut The amount of AVAX received\\r\\n     */\\r\\n    function swapExactTokensForAVAX(\\r\\n        address tokenIn,\\r\\n        uint256 amountIn,\\r\\n        uint256 amountOutMin,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    ) external returns (uint256 amountOut);\\r\\n    \\r\\n    /**\\r\\n     * @dev Swap AVAX for tokens\\r\\n     * @param tokenOut The token address to receive\\r\\n     * @param amountOutMin The minimum amount of tokens to receive\\r\\n     * @param to The address to receive the tokens\\r\\n     * @param deadline The deadline for the swap\\r\\n     * @return amountOut The amount of tokens received\\r\\n     */\\r\\n    function swapExactAVAXForTokens(\\r\\n        address tokenOut,\\r\\n        uint256 amountOutMin,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    ) external payable returns (uint256 amountOut);\\r\\n    \\r\\n    /**\\r\\n     * @dev Get the expected output amount for a swap\\r\\n     * @param tokenIn The token address to swap from (address(0) for AVAX)\\r\\n     * @param amountIn The amount to swap\\r\\n     * @return amountOut The expected amount to receive\\r\\n     */\\r\\n    function getAmountsOut(address tokenIn, uint256 amountIn) external view returns (uint256 amountOut);\\r\\n}\\r\\n\",\"keccak256\":\"0xd0206efad8b6aa95193a2aa9e60f417d3b2a5293b2a5fb1fc7f820cef89e9eec\",\"license\":\"MIT\"},\"contracts/IOracle.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\r\\npragma solidity >=0.8.0 <0.9.0;\\r\\n\\r\\n/**\\r\\n * Oracle Interface for fetching token prices\\r\\n * @author Avanguard Index\\r\\n */\\r\\ninterface IOracle {\\r\\n    /**\\r\\n     * @dev Get the current price of a token in USD with 8 decimals\\r\\n     * @param token The token address to get price for\\r\\n     * @return price The current price in USD (8 decimals)\\r\\n     */\\r\\n    function getPrice(address token) external view returns (uint256 price);\\r\\n}\\r\\n\",\"keccak256\":\"0x54093242ac1376939ae9d2dbd562646ba452abfba6e380f209d4aae03d6d1654\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b506040516200614338038062006143833981016040819052620000349162000141565b806001600160a01b0381166200006457604051631e4fbdf760e01b81526000600482015260240160405180910390fd5b6200006f81620000d4565b5050600180546001600160a01b03199081166001600160a01b03978816179091556002805482169587169590951790945560038054851693861693909317909255600480548416918516919091179055600580549092169216919091179055620001c2565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b80516001600160a01b03811681146200013c57600080fd5b919050565b60008060008060008060c087890312156200015b57600080fd5b620001668762000124565b9550620001766020880162000124565b9450620001866040880162000124565b9350620001966060880162000124565b9250620001a66080880162000124565b9150620001b660a0880162000124565b90509295509295509295565b615f7180620001d26000396000f3fe60806040523480156200001157600080fd5b5060043610620001695760003560e01c80637a862c6a11620000d3578063aef1be9a1162000086578063aef1be9a146200031e578063d8c149e0146200034a578063dce0b4e41462000361578063df12f8c51462000371578063eb8bbd281462000397578063f2fde38b14620003a057600080fd5b80637a862c6a146200028d5780637b8e889514620002b35780637dc0d1d014620002ca5780637f51bb1f14620002de57806387f4637b14620002f55780638da5cb5b146200030c57600080fd5b806352c8df64116200012c57806352c8df6414620001fd57806361d027b31462000227578063658bb543146200023b578063692058c2146200024f578063715018a6146200026357806374b4eafe146200026d57600080fd5b8063117be4c2146200016e57806319dc94a6146200019f5780631bd6090014620001b85780631cb44dfc14620001cf5780631fa241bb14620001e6575b600080fd5b60055462000182906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b620001b6620001b0366004620012b2565b620003b7565b005b620001b6620001c9366004620012b2565b62000437565b620001b6620001e0366004620012b2565b620004b1565b620001b6620001f73660046200143e565b6200052e565b620002146200020e3660046200155b565b62000bc1565b6040516200019695949392919062001641565b60035462000182906001600160a01b031681565b60015462000182906001600160a01b031681565b60045462000182906001600160a01b031681565b620001b662000dfb565b6200027e683635c9adc5dea0000081565b60405190815260200162000196565b620002a46200029e366004620016b3565b62000e13565b604051620001969190620016d6565b62000182620002c43660046200155b565b62000ff8565b60025462000182906001600160a01b031681565b620001b6620002ef366004620012b2565b62001023565b620001b662000306366004620012b2565b620010a7565b6000546001600160a01b031662000182565b620001826200032f3660046200155b565b6007602052600090815260409020546001600160a01b031681565b6200027e6200035b366004620016eb565b6200112b565b683635c9adc5dea000006200027e565b6200038862000382366004620012b2565b6200115d565b6040516200019691906200171a565b6006546200027e565b620001b6620003b1366004620012b2565b620011cb565b620003c16200120f565b6001600160a01b038116620004155760405162461bcd60e51b8152602060048201526015602482015274496e76616c6964205741564158206164647265737360581b60448201526064015b60405180910390fd5b600580546001600160a01b0319166001600160a01b0392909216919091179055565b620004416200120f565b6001600160a01b0381166200048f5760405162461bcd60e51b8152602060048201526013602482015272496e76616c696420444558206164647265737360681b60448201526064016200040c565b600480546001600160a01b0319166001600160a01b0392909216919091179055565b620004bb6200120f565b6001600160a01b0381166200050c5760405162461bcd60e51b8152602060048201526016602482015275496e76616c6964206f7261636c65206164647265737360501b60448201526064016200040c565b600280546001600160a01b0319166001600160a01b0392909216919091179055565b6000845111620005815760405162461bcd60e51b815260206004820152601960248201527f46756e64206e616d652063616e6e6f7420626520656d7074790000000000000060448201526064016200040c565b6000835111620005d45760405162461bcd60e51b815260206004820152601b60248201527f46756e64207469636b65722063616e6e6f7420626520656d707479000000000060448201526064016200040c565b6000825111620006275760405162461bcd60e51b815260206004820152601c60248201527f4d7573742068617665206174206c65617374206f6e6520746f6b656e0000000060448201526064016200040c565b6014825111156200067b5760405162461bcd60e51b815260206004820152601a60248201527f4d6178696d756d20323020746f6b656e73207065722066756e6400000000000060448201526064016200040c565b8051825114620006dc5760405162461bcd60e51b815260206004820152602560248201527f546f6b656e7320616e642077656967687461676573206c656e677468206d69736044820152640dac2e8c6d60db1b60648201526084016200040c565b6000805b8351811015620008de5760006001600160a01b03168482815181106200070a576200070a6200172f565b60200260200101516001600160a01b031603620007625760405162461bcd60e51b8152602060048201526015602482015274496e76616c696420746f6b656e206164647265737360581b60448201526064016200040c565b60008382815181106200077957620007796200172f565b602002602001015111620007d05760405162461bcd60e51b815260206004820181905260248201527f576569676874616765206d7573742062652067726561746572207468616e203060448201526064016200040c565b828181518110620007e557620007e56200172f565b602002602001015182620007fa91906200175b565b915060006200080b8260016200175b565b90505b8451811015620008c8578481815181106200082d576200082d6200172f565b60200260200101516001600160a01b03168583815181106200085357620008536200172f565b60200260200101516001600160a01b031603620008b35760405162461bcd60e51b815260206004820152601c60248201527f4475706c696361746520746f6b656e73206e6f7420616c6c6f7765640000000060448201526064016200040c565b80620008bf8162001771565b9150506200080e565b5080620008d58162001771565b915050620006e0565b508061271014620009325760405162461bcd60e51b815260206004820152601c60248201527f546f74616c20776569676874616765206d75737420626520313030250000000060448201526064016200040c565b6001546040516370a0823160e01b8152336004820152683635c9adc5dea00000916001600160a01b0316906370a0823190602401602060405180830381865afa15801562000984573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620009aa91906200178d565b101562000a115760405162461bcd60e51b815260206004820152602e60248201527f496e73756666696369656e74204147492062616c616e636520666f722066756e60448201526d64206372656174696f6e2066656560901b60648201526084016200040c565b60015460405163079cc67960e41b8152336004820152683635c9adc5dea0000060248201526001600160a01b03909116906379cc679090604401600060405180830381600087803b15801562000a6657600080fd5b505af115801562000a7b573d6000803e3d6000fd5b5050600254600354600454600554604051600096508b95508a948a948a9433946001600160a01b0393841694928416939182169291169062000abd906200128e565b62000ad199989796959493929190620017a7565b604051809103906000f08015801562000aee573d6000803e3d6000fd5b506006805460018082019092557ff652222313e28459528d920b65115c16c04f3efc82aaedc97be59f3f377c0d3f810180546001600160a01b0385166001600160a01b03199182168117909255600083815260076020908152604080832080549094169094179092553380825260088352838220805496870181558252919020909301829055519293509182907fed347e9f5d6a8c19fdf08c48cd262b1de465d28cb92c4032b2af21f0d3eef93f9062000bb0908b908b9088908c906200183e565b60405180910390a350505050505050565b6000606080606080600680549050861062000c155760405162461bcd60e51b8152602060048201526013602482015272119d5b9908191bd95cc81b9bdd08195e1a5cdd606a1b60448201526064016200040c565b60006006878154811062000c2d5762000c2d6200172f565b600091825260208220015460408051639ce1413b60e01b815290516001600160a01b0390921698508893508392639ce1413b926004808401938290030181865afa15801562000c80573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405262000caa919081019062001897565b9450806001600160a01b031663c0e547a36040518163ffffffff1660e01b8152600401600060405180830381865afa15801562000ceb573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405262000d15919081019062001897565b9350806001600160a01b031663d95bd6c96040518163ffffffff1660e01b8152600401600060405180830381865afa15801562000d56573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405262000d80919081019062001984565b9250806001600160a01b03166341b6b81e6040518163ffffffff1660e01b8152600401600060405180830381865afa15801562000dc1573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405262000deb9190810190620019c5565b9050809250505091939590929450565b62000e056200120f565b62000e1160006200123e565b565b600654606090831062000e695760405162461bcd60e51b815260206004820152601960248201527f537461727420696e646578206f7574206f6620626f756e64730000000000000060448201526064016200040c565b60065482111562000ebd5760405162461bcd60e51b815260206004820152601760248201527f456e6420696e646578206f7574206f6620626f756e647300000000000000000060448201526064016200040c565b8183111562000f055760405162461bcd60e51b8152602060048201526013602482015272496e76616c696420696e6465782072616e676560681b60448201526064016200040c565b600062000f13848462001a8c565b905060008167ffffffffffffffff81111562000f335762000f33620012d9565b60405190808252806020026020018201604052801562000f5d578160200160208202803683370190505b50905060005b8281101562000fed57600662000f7a82886200175b565b8154811062000f8d5762000f8d6200172f565b9060005260206000200160009054906101000a90046001600160a01b031682828151811062000fc05762000fc06200172f565b6001600160a01b03909216602092830291909101909101528062000fe48162001771565b91505062000f63565b509150505b92915050565b600681815481106200100957600080fd5b6000918252602090912001546001600160a01b0316905081565b6200102d6200120f565b6001600160a01b038116620010855760405162461bcd60e51b815260206004820152601860248201527f496e76616c69642074726561737572792061646472657373000000000000000060448201526064016200040c565b600380546001600160a01b0319166001600160a01b0392909216919091179055565b620010b16200120f565b6001600160a01b038116620011095760405162461bcd60e51b815260206004820152601960248201527f496e76616c69642041474920746f6b656e20616464726573730000000000000060448201526064016200040c565b600180546001600160a01b0319166001600160a01b0392909216919091179055565b600860205281600052604060002081815481106200114857600080fd5b90600052602060002001600091509150505481565b6001600160a01b038116600090815260086020908152604091829020805483518184028101840190945280845260609392830182828015620011bf57602002820191906000526020600020905b815481526020019060010190808311620011aa575b50505050509050919050565b620011d56200120f565b6001600160a01b0381166200120157604051631e4fbdf760e01b8152600060048201526024016200040c565b6200120c816200123e565b50565b6000546001600160a01b0316331462000e115760405163118cdaa760e01b81523360048201526024016200040c565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6144998062001aa383390190565b6001600160a01b03811681146200120c57600080fd5b600060208284031215620012c557600080fd5b8135620012d2816200129c565b9392505050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff811182821017156200131b576200131b620012d9565b604052919050565b600067ffffffffffffffff821115620013405762001340620012d9565b50601f01601f191660200190565b600082601f8301126200136057600080fd5b813562001377620013718262001323565b620012ef565b8181528460208386010111156200138d57600080fd5b816020850160208301376000918101602001919091529392505050565b600067ffffffffffffffff821115620013c757620013c7620012d9565b5060051b60200190565b600082601f830112620013e357600080fd5b81356020620013f66200137183620013aa565b82815260059290921b840181019181810190868411156200141657600080fd5b8286015b848110156200143357803583529183019183016200141a565b509695505050505050565b600080600080608085870312156200145557600080fd5b843567ffffffffffffffff808211156200146e57600080fd5b6200147c888389016200134e565b95506020915081870135818111156200149457600080fd5b620014a289828a016200134e565b955050604087013581811115620014b857600080fd5b8701601f81018913620014ca57600080fd5b8035620014db6200137182620013aa565b81815260059190911b8201840190848101908b831115620014fb57600080fd5b928501925b828410156200152657833562001516816200129c565b8252928501929085019062001500565b965050505060608701359150808211156200154057600080fd5b506200154f87828801620013d1565b91505092959194509250565b6000602082840312156200156e57600080fd5b5035919050565b60005b838110156200159257818101518382015260200162001578565b50506000910152565b60008151808452620015b581602086016020860162001575565b601f01601f19169290920160200192915050565b600081518084526020808501945080840160005b83811015620016045781516001600160a01b031687529582019590820190600101620015dd565b509495945050505050565b600081518084526020808501945080840160005b83811015620016045781518752958201959082019060010162001623565b6001600160a01b038616815260a06020820181905260009062001667908301876200159b565b82810360408401526200167b81876200159b565b90508281036060840152620016918186620015c9565b90508281036080840152620016a781856200160f565b98975050505050505050565b60008060408385031215620016c757600080fd5b50508035926020909101359150565b602081526000620012d26020830184620015c9565b60008060408385031215620016ff57600080fd5b82356200170c816200129c565b946020939093013593505050565b602081526000620012d260208301846200160f565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b8082018082111562000ff25762000ff262001745565b60006001820162001786576200178662001745565b5060010190565b600060208284031215620017a057600080fd5b5051919050565b6000610120808352620017bd8184018d6200159b565b90508281036020840152620017d3818c6200159b565b90508281036040840152620017e9818b620015c9565b90508281036060840152620017ff818a6200160f565b6001600160a01b03988916608085015296881660a0840152505092851660c084015290841660e083015290921661010090920191909152949350505050565b6080815260006200185360808301876200159b565b82810360208401526200186781876200159b565b6001600160a01b0386166040850152838103606085015290506200188c8185620015c9565b979650505050505050565b600060208284031215620018aa57600080fd5b815167ffffffffffffffff811115620018c257600080fd5b8201601f81018413620018d457600080fd5b8051620018e5620013718262001323565b818152856020838501011115620018fb57600080fd5b6200190e82602083016020860162001575565b95945050505050565b600082601f8301126200192957600080fd5b815160206200193c6200137183620013aa565b82815260059290921b840181019181810190868411156200195c57600080fd5b8286015b848110156200143357805162001976816200129c565b835291830191830162001960565b6000602082840312156200199757600080fd5b815167ffffffffffffffff811115620019af57600080fd5b620019bd8482850162001917565b949350505050565b60008060408385031215620019d957600080fd5b825167ffffffffffffffff80821115620019f257600080fd5b62001a008683870162001917565b935060209150818501518181111562001a1857600080fd5b85019050601f8101861362001a2c57600080fd5b805162001a3d6200137182620013aa565b81815260059190911b8201830190838101908883111562001a5d57600080fd5b928401925b8284101562001a7d5783518252928401929084019062001a62565b80955050505050509250929050565b8181038181111562000ff25762000ff26200174556fe60806040523480156200001157600080fd5b50604051620044993803806200449983398101604081905262000034916200062e565b8489896003620000458382620007d4565b506004620000548282620007d4565b5050506001600160a01b0381166200008757604051631e4fbdf760e01b8152600060048201526024015b60405180910390fd5b620000928162000364565b508551875114620000f45760405162461bcd60e51b815260206004820152602560248201527f546f6b656e7320616e642077656967687461676573206c656e677468206d69736044820152640dac2e8c6d60db1b60648201526084016200007e565b6000875111620001475760405162461bcd60e51b815260206004820152601c60248201527f4d7573742068617665206174206c65617374206f6e6520746f6b656e0000000060448201526064016200007e565b6006620001558a82620007d4565b506007620001648982620007d4565b5086516200017a9060089060208a0190620003b6565b50600980546001600160a01b03199081166001600160a01b0388811691909117909255600a80548216878416179055601080548216868416179055600b80548216858416179055600c80549091169183169190911790556000805b8851811015620002f0576000888281518110620001f657620001f6620008a0565b6020026020010151116200024d5760405162461bcd60e51b815260206004820181905260248201527f576569676874616765206d7573742062652067726561746572207468616e203060448201526064016200007e565b878181518110620002625762000262620008a0565b6020026020010151600e60008b8481518110620002835762000283620008a0565b60200260200101516001600160a01b03166001600160a01b0316815260200190815260200160002081905550878181518110620002c457620002c4620008a0565b602002602001015182620002d99190620008cc565b915080620002e781620008e8565b915050620001d5565b506127108114620003445760405162461bcd60e51b815260206004820152601c60248201527f546f74616c20776569676874616765206d75737420626520313030250000000060448201526064016200007e565b600f819055620003548662000364565b5050505050505050505062000904565b600580546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b8280548282559060005260206000209081019282156200040e579160200282015b828111156200040e57825182546001600160a01b0319166001600160a01b03909116178255602090920191600190910190620003d7565b506200041c92915062000420565b5090565b5b808211156200041c576000815560010162000421565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f191681016001600160401b038111828210171562000478576200047862000437565b604052919050565b600082601f8301126200049257600080fd5b81516001600160401b03811115620004ae57620004ae62000437565b6020620004c4601f8301601f191682016200044d565b8281528582848701011115620004d957600080fd5b60005b83811015620004f9578581018301518282018401528201620004dc565b506000928101909101919091529392505050565b60006001600160401b0382111562000529576200052962000437565b5060051b60200190565b80516001600160a01b03811681146200054b57600080fd5b919050565b600082601f8301126200056257600080fd5b815160206200057b62000575836200050d565b6200044d565b82815260059290921b840181019181810190868411156200059b57600080fd5b8286015b84811015620005c157620005b38162000533565b83529183019183016200059f565b509695505050505050565b600082601f830112620005de57600080fd5b81516020620005f162000575836200050d565b82815260059290921b840181019181810190868411156200061157600080fd5b8286015b84811015620005c1578051835291830191830162000615565b60008060008060008060008060006101208a8c0312156200064e57600080fd5b89516001600160401b03808211156200066657600080fd5b620006748d838e0162000480565b9a5060208c01519150808211156200068b57600080fd5b620006998d838e0162000480565b995060408c0151915080821115620006b057600080fd5b620006be8d838e0162000550565b985060608c0151915080821115620006d557600080fd5b50620006e48c828d01620005cc565b965050620006f560808b0162000533565b94506200070560a08b0162000533565b93506200071560c08b0162000533565b92506200072560e08b0162000533565b9150620007366101008b0162000533565b90509295985092959850929598565b600181811c908216806200075a57607f821691505b6020821081036200077b57634e487b7160e01b600052602260045260246000fd5b50919050565b601f821115620007cf57600081815260208120601f850160051c81016020861015620007aa5750805b601f850160051c820191505b81811015620007cb57828155600101620007b6565b5050505b505050565b81516001600160401b03811115620007f057620007f062000437565b620008088162000801845462000745565b8462000781565b602080601f831160018114620008405760008415620008275750858301515b600019600386901b1c1916600185901b178555620007cb565b600085815260208120601f198616915b82811015620008715788860151825594840194600190910190840162000850565b5085821015620008905787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b80820180821115620008e257620008e2620008b6565b92915050565b600060018201620008fd57620008fd620008b6565b5060010190565b613b8580620009146000396000f3fe6080604052600436106102605760003560e01c8063715018a611610144578063a9059cbb116100b6578063dd62ed3e1161007a578063dd62ed3e146106cb578063e4849b3214610711578063f09d14d714610731578063f2fde38b14610755578063f359ced514610775578063fb5825ba146107ab57600080fd5b8063a9059cbb14610649578063c0e547a314610669578063cfa498a31461067e578063d95bd6c914610694578063da23eb63146106b657600080fd5b806395d89b411161010857806395d89b41146105cd5780639ce1413b146105e2578063a3bf224b146105f7578063a525ad3c14610617578063a5c6e8ed1461062c578063a6f2ae3a1461064157600080fd5b8063715018a61461055a5780637dc0d1d01461056f5780637f51bb1f1461058f57806383d5e726146102fb5780638da5cb5b146105af57600080fd5b80632a033d2a116101dd5780634e1d486b116101a15780634e1d486b146104745780634fb8d7491461048a578063523fba7f146104b757806361d027b3146104e4578063692058c21461050457806370a082311461052457600080fd5b80632a033d2a146103ca5780632be01190146103df578063313ce567146103ff5780633aecd0e31461041b57806341b6b81e1461045157600080fd5b806318160ddd1161022457806318160ddd1461033e5780631bd60900146103535780631cb44dfc1461037557806323b872dd1461039557806324dd7c93146103b557600080fd5b806302d05d3f1461026c57806306fdde03146102a9578063095ea7b3146102cb5780630d1f2403146102fb578063117be4c21461031e57600080fd5b3661026757005b600080fd5b34801561027857600080fd5b5060095461028c906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b3480156102b557600080fd5b506102be6107cb565b6040516102a09190613530565b3480156102d757600080fd5b506102eb6102e636600461359a565b61085d565b60405190151581526020016102a0565b34801561030757600080fd5b50610310601981565b6040519081526020016102a0565b34801561032a57600080fd5b50600c5461028c906001600160a01b031681565b34801561034a57600080fd5b50600254610310565b34801561035f57600080fd5b5061037361036e3660046135c4565b610877565b005b34801561038157600080fd5b506103736103903660046135c4565b6108f2565b3480156103a157600080fd5b506102eb6103b03660046135e6565b61096b565b3480156103c157600080fd5b506102eb61098f565b3480156103d657600080fd5b50610310610a02565b3480156103eb57600080fd5b506103736103fa3660046136f8565b610bdb565b34801561040b57600080fd5b50604051601281526020016102a0565b34801561042757600080fd5b506103106104363660046135c4565b6001600160a01b03166000908152600d602052604090205490565b34801561045d57600080fd5b50610466611494565b6040516102a092919061382c565b34801561048057600080fd5b50610310600f5481565b34801561049657600080fd5b506103106104a53660046135c4565b600e6020526000908152604090205481565b3480156104c357600080fd5b506103106104d23660046135c4565b600d6020526000908152604090205481565b3480156104f057600080fd5b5060105461028c906001600160a01b031681565b34801561051057600080fd5b50600b5461028c906001600160a01b031681565b34801561053057600080fd5b5061031061053f3660046135c4565b6001600160a01b031660009081526020819052604090205490565b34801561056657600080fd5b506103736115bc565b34801561057b57600080fd5b50600a5461028c906001600160a01b031681565b34801561059b57600080fd5b506103736105aa3660046135c4565b6115d0565b3480156105bb57600080fd5b506005546001600160a01b031661028c565b3480156105d957600080fd5b506102be611650565b3480156105ee57600080fd5b506102be61165f565b34801561060357600080fd5b5061028c61061236600461385a565b6116ed565b34801561062357600080fd5b50610310606481565b34801561063857600080fd5b5061031060c881565b610373611717565b34801561065557600080fd5b506102eb61066436600461359a565b61190e565b34801561067557600080fd5b506102be61191c565b34801561068a57600080fd5b5061031061271081565b3480156106a057600080fd5b506106a9611929565b6040516102a09190613873565b3480156106c257600080fd5b50610310603281565b3480156106d757600080fd5b506103106106e6366004613886565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b34801561071d57600080fd5b5061037361072c36600461385a565b61198a565b34801561073d57600080fd5b50610746611bfc565b6040516102a0939291906138b9565b34801561076157600080fd5b506103736107703660046135c4565b611dcb565b34801561078157600080fd5b506103106107903660046135c4565b6001600160a01b03166000908152600e602052604090205490565b3480156107b757600080fd5b506103106107c63660046135c4565b611e09565b6060600380546107da906138f2565b80601f0160208091040260200160405190810160405280929190818152602001828054610806906138f2565b80156108535780601f1061082857610100808354040283529160200191610853565b820191906000526020600020905b81548152906001019060200180831161083657829003601f168201915b5050505050905090565b60003361086b818585611e27565b60019150505b92915050565b61087f611e39565b6001600160a01b0381166108d05760405162461bcd60e51b8152602060048201526013602482015272496e76616c696420444558206164647265737360681b60448201526064015b60405180910390fd5b600b80546001600160a01b0319166001600160a01b0392909216919091179055565b6108fa611e39565b6001600160a01b0381166109495760405162461bcd60e51b8152602060048201526016602482015275496e76616c6964206f7261636c65206164647265737360501b60448201526064016108c7565b600a80546001600160a01b0319166001600160a01b0392909216919091179055565b600033610979858285611e66565b610984858585611ee4565b506001949350505050565b600080805b6008548110156109f857600e6000600883815481106109b5576109b5613926565b60009182526020808320909101546001600160a01b031683528201929092526040019020546109e49083613952565b9150806109f081613965565b915050610994565b5061271014919050565b6000610a0d60025490565b600003610a1a5750600090565b6000805b600854811015610bd557600060088281548110610a3d57610a3d613926565b60009182526020808320909101546001600160a01b0316808352600d9091526040909120549091508015610bc057600a546040516341976e0960e01b81526001600160a01b03848116600483015260009216906341976e0990602401602060405180830381865afa158015610ab6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ada919061397e565b600a546040516341976e0960e01b81526000600482018190529293506001600160a01b03909116906341976e0990602401602060405180830381865afa158015610b28573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b4c919061397e565b9050600082118015610b5e5750600081115b15610bb05760006305f5e100610b748486613997565b610b7e91906139ae565b9050600082610b91836305f5e100613997565b610b9b91906139ae565b9050610ba78189613952565b97505050610bbd565b610bba8387613952565b95505b50505b50508080610bcd90613965565b915050610a1e565b50919050565b610be3611e39565b8051825114610c425760405162461bcd60e51b815260206004820152602560248201527f546f6b656e7320616e642077656967687461676573206c656e677468206d69736044820152640dac2e8c6d60db1b60648201526084016108c7565b6000825111610c935760405162461bcd60e51b815260206004820152601c60248201527f4d7573742068617665206174206c65617374206f6e6520746f6b656e0000000060448201526064016108c7565b600b546001600160a01b0316610cbb5760405162461bcd60e51b81526004016108c7906139d0565b6000805b8351811015610d6a576000838281518110610cdc57610cdc613926565b602002602001015111610d315760405162461bcd60e51b815260206004820181905260248201527f576569676874616765206d7573742062652067726561746572207468616e203060448201526064016108c7565b828181518110610d4357610d43613926565b602002602001015182610d569190613952565b915080610d6281613965565b915050610cbf565b506127108114610dbc5760405162461bcd60e51b815260206004820152601c60248201527f546f74616c20776569676874616765206d75737420626520313030250000000060448201526064016108c7565b6000306001600160a01b0316632a033d2a6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610dfc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e20919061397e565b905060008111610e725760405162461bcd60e51b815260206004820152601a60248201527f4e6f2066756e642076616c756520746f20726562616c616e636500000000000060448201526064016108c7565b60005b8451811015610f7757600a5485516000916001600160a01b0316906341976e0990889085908110610ea857610ea8613926565b60200260200101516040518263ffffffff1660e01b8152600401610edb91906001600160a01b0391909116815260200190565b602060405180830381865afa158015610ef8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f1c919061397e565b905060008111610f645760405162461bcd60e51b8152602060048201526013602482015272496e76616c696420746f6b656e20707269636560681b60448201526064016108c7565b5080610f6f81613965565b915050610e75565b50600a546040516341976e0960e01b8152600060048201819052916001600160a01b0316906341976e0990602401602060405180830381865afa158015610fc2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fe6919061397e565b90506000811161102d5760405162461bcd60e51b8152602060048201526012602482015271496e76616c6964204156415820707269636560701b60448201526064016108c7565b6000855167ffffffffffffffff81111561104957611049613622565b604051908082528060200260200182016040528015611072578160200160208202803683370190505b50905060005b865181101561120557600087828151811061109557611095613926565b6020026020010151905060006127108884815181106110b6576110b6613926565b6020026020010151876110c99190613997565b6110d391906139ae565b600a546040516341976e0960e01b81526001600160a01b038581166004830152929350600092909116906341976e0990602401602060405180830381865afa158015611123573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611147919061397e565b600a546040516341976e0960e01b81526000600482018190529293506001600160a01b03909116906341976e0990602401602060405180830381865afa158015611195573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111b9919061397e565b9050816111c68285613997565b6111d091906139ae565b8686815181106111e2576111e2613926565b6020026020010181815250505050505080806111fd90613965565b915050611078565b5060005b86518110156113d057600087828151811061122657611226613926565b602002602001015190506000600d6000836001600160a01b03166001600160a01b03168152602001908152602001600020549050600084848151811061126e5761126e613926565b602002602001015190508082146113ba57808211156112d357600061129382846139f5565b905080156112cd5760006112a78583611f43565b905080156112cb576001600160a01b0385166000908152600d602052604090208390555b505b506113ba565b818111156113ba5760006112e783836139f5565b905080156113b85760006112fb85836121e7565b90506000811180156113775750600c546040516370a0823160e01b815230600482015282916001600160a01b0316906370a0823190602401602060405180830381865afa158015611350573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611374919061397e565b10155b156113b657600061138886836124a9565b905080156113b45761139a8186613952565b6001600160a01b0387166000908152600d60205260409020555b505b505b505b50505080806113c890613965565b915050611209565b5060005b865181101561144c578581815181106113ef576113ef613926565b6020026020010151600e600089848151811061140d5761140d613926565b60200260200101516001600160a01b03166001600160a01b0316815260200190815260200160002081905550808061144490613965565b9150506113d4565b50600f8490556040517fe62c3b4fb96e6461a60aae181b58c3bea82937a33a60ed89e592c0a4b4933aa990611484908890889061382c565b60405180910390a1505050505050565b60608060088054806020026020016040519081016040528092919081815260200182805480156114ed57602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116114cf575b5050600854939550505067ffffffffffffffff821115905061151157611511613622565b60405190808252806020026020018201604052801561153a578160200160208202803683370190505b50905060005b6008548110156115b757600e60006008838154811061156157611561613926565b60009182526020808320909101546001600160a01b03168352820192909252604001902054825183908390811061159a5761159a613926565b6020908102919091010152806115af81613965565b915050611540565b509091565b6115c4611e39565b6115ce6000612702565b565b6115d8611e39565b6001600160a01b03811661162e5760405162461bcd60e51b815260206004820152601860248201527f496e76616c69642074726561737572792061646472657373000000000000000060448201526064016108c7565b601080546001600160a01b0319166001600160a01b0392909216919091179055565b6060600480546107da906138f2565b6006805461166c906138f2565b80601f0160208091040260200160405190810160405280929190818152602001828054611698906138f2565b80156116e55780601f106116ba576101008083540402835291602001916116e5565b820191906000526020600020905b8154815290600101906020018083116116c857829003601f168201915b505050505081565b600881815481106116fd57600080fd5b6000918252602090912001546001600160a01b0316905081565b600034116117585760405162461bcd60e51b815260206004820152600e60248201526d09aeae6e840e6cadcc84082ac82b60931b60448201526064016108c7565b60085461179e5760405162461bcd60e51b81526020600482015260146024820152734e6f20756e6465726c79696e6720746f6b656e7360601b60448201526064016108c7565b60006127106117ae606434613997565b6117b891906139ae565b905060006117c682346139f5565b905060006117d382612754565b90506117df3382612849565b6117e883612883565b600c60009054906101000a90046001600160a01b03166001600160a01b031663d0e30db0836040518263ffffffff1660e01b81526004016000604051808303818588803b15801561183857600080fd5b505af115801561184c573d6000803e3d6000fd5b5050600c546040516370a0823160e01b81523060048201526118c694506001600160a01b0390911692506370a082319150602401602060405180830381865afa15801561189d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118c1919061397e565b612a85565b604080513481526020810183905290810184905233907f0f18542593f463db9b35ce49dfef2fa3e7b5976b7dbfd9a901dd384d2da16da49060600160405180910390a2505050565b60003361086b818585611ee4565b6007805461166c906138f2565b6060600880548060200260200160405190810160405280929190818152602001828054801561085357602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311611963575050505050905090565b600081116119aa5760405162461bcd60e51b81526004016108c790613a08565b33600090815260208190526040902054811115611a095760405162461bcd60e51b815260206004820152601860248201527f496e73756666696369656e742066756e6420746f6b656e73000000000000000060448201526064016108c7565b6000611a1460025490565b11611a615760405162461bcd60e51b815260206004820152601d60248201527f4e6f2066756e6420746f6b656e7320696e2063697263756c6174696f6e00000060448201526064016108c7565b6000611a6c60025490565b611a7e83670de0b6b3a7640000613997565b611a8891906139ae565b90506000611a9582612dc6565b905060008111611adc5760405162461bcd60e51b81526020600482015260126024820152712737903b30b63ab2903a37903932ba3ab93760711b60448201526064016108c7565b6000612710611aec606484613997565b611af691906139ae565b90506000611b0482846139f5565b9050611b1033866131e0565b611b1982612883565b604051600090339083908381818185875af1925050503d8060008114611b5b576040519150601f19603f3d011682016040523d82523d6000602084013e611b60565b606091505b5050905080611bb15760405162461bcd60e51b815260206004820152601760248201527f4661696c656420746f207472616e73666572204156415800000000000000000060448201526064016108c7565b604080518781526020810184905290810184905233907fcb8b579dfe6e9168d68023b09b7de38effbd57bc37422ed8b5718ca997730d589060600160405180910390a2505050505050565b60608060606008805480602002602001604051908101604052809291908181526020018280548015611c5757602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311611c39575b5050600854939650505067ffffffffffffffff8211159050611c7b57611c7b613622565b604051908082528060200260200182016040528015611ca4578160200160208202803683370190505b5060085490925067ffffffffffffffff811115611cc357611cc3613622565b604051908082528060200260200182016040528015611cec578160200160208202803683370190505b50905060005b600854811015611dc557600d600060088381548110611d1357611d13613926565b60009182526020808320909101546001600160a01b031683528201929092526040019020548351849083908110611d4c57611d4c613926565b602002602001018181525050600e600060088381548110611d6f57611d6f613926565b60009182526020808320909101546001600160a01b031683528201929092526040019020548251839083908110611da857611da8613926565b602090810291909101015280611dbd81613965565b915050611cf2565b50909192565b611dd3611e39565b6001600160a01b038116611dfd57604051631e4fbdf760e01b8152600060048201526024016108c7565b611e0681612702565b50565b6001600160a01b038116600090815260208190526040812054610871565b611e348383836001613216565b505050565b6005546001600160a01b031633146115ce5760405163118cdaa760e01b81523360048201526024016108c7565b6001600160a01b038381166000908152600160209081526040808320938616835292905220546000198114611ede5781811015611ecf57604051637dc7a0d960e11b81526001600160a01b038416600482015260248101829052604481018390526064016108c7565b611ede84848484036000613216565b50505050565b6001600160a01b038316611f0e57604051634b637e8f60e11b8152600060048201526024016108c7565b6001600160a01b038216611f385760405163ec442f0560e01b8152600060048201526024016108c7565b611e348383836132eb565b600b546000906001600160a01b0316611f6e5760405162461bcd60e51b81526004016108c7906139d0565b60008211611f8e5760405162461bcd60e51b81526004016108c790613a08565b600b5460405163095ea7b360e01b81526001600160a01b039182166004820152602481018490529084169063095ea7b3906044016020604051808303816000875af1158015611fe1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120059190613a3f565b50604080516002808252606082018352600092602083019080368337019050509050838160008151811061203b5761203b613926565b6001600160a01b039283166020918202929092010152600c5482519116908290600190811061206c5761206c613926565b6001600160a01b039283166020918202929092010152600c546040516370a0823160e01b815230600482015260009291909116906370a0823190602401602060405180830381865afa1580156120c6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120ea919061397e565b600b549091506001600160a01b0316635c11d795856001853061210f426104b0613952565b6040518663ffffffff1660e01b815260040161212f959493929190613a61565b600060405180830381600087803b15801561214957600080fd5b505af115801561215d573d6000803e3d6000fd5b5050600c546040516370a0823160e01b8152306004820152600093506001600160a01b0390911691506370a08231906024015b602060405180830381865afa1580156121ad573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121d1919061397e565b90506121dd82826139f5565b9695505050505050565b600b546000906001600160a01b03166122125760405162461bcd60e51b81526004016108c7906139d0565b6000821161226e5760405162461bcd60e51b815260206004820152602360248201527f546f6b656e20616d6f756e74206d75737420626520677265617465722074686160448201526206e20360ec1b60648201526084016108c7565b6040805160028082526060820183526000926020830190803683375050600c5482519293506001600160a01b0316918391506000906122af576122af613926565b60200260200101906001600160a01b031690816001600160a01b03168152505083816001815181106122e3576122e3613926565b6001600160a01b039283166020918202929092010152600b546040516307c0329d60e21b8152911690631f00ca74906123229086908590600401613a9d565b600060405180830381865afa92505050801561236057506040513d6000823e601f3d908101601f1916820160405261235d9190810190613abe565b60015b61247b57600a546040516341976e0960e01b81526001600160a01b03868116600483015260009216906341976e0990602401602060405180830381865afa1580156123af573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123d3919061397e565b600a546040516341976e0960e01b81526000600482018190529293506001600160a01b03909116906341976e0990602401602060405180830381865afa158015612421573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612445919061397e565b90506000821180156124575750600081115b1561247457806124678387613997565b61247191906139ae565b93505b50506124a2565b8051156124a0578060008151811061249557612495613926565b602002602001015192505b505b5092915050565b600b546000906001600160a01b03166124d45760405162461bcd60e51b81526004016108c7906139d0565b600082116124f45760405162461bcd60e51b81526004016108c790613a08565b600c54600b5460405163095ea7b360e01b81526001600160a01b0391821660048201526024810185905291169063095ea7b3906044016020604051808303816000875af1158015612549573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061256d9190613a3f565b506040805160028082526060820183526000926020830190803683375050600c5482519293506001600160a01b0316918391506000906125af576125af613926565b60200260200101906001600160a01b031690816001600160a01b03168152505083816001815181106125e3576125e3613926565b6001600160a01b0392831660209182029290920101526040516370a0823160e01b81523060048201526000918616906370a0823190602401602060405180830381865afa158015612638573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061265c919061397e565b600b549091506001600160a01b0316635c11d7958560018530612681426104b0613952565b6040518663ffffffff1660e01b81526004016126a1959493929190613a61565b600060405180830381600087803b1580156126bb57600080fd5b505af11580156126cf573d6000803e3d6000fd5b50506040516370a0823160e01b8152306004820152600092506001600160a01b03881691506370a0823190602401612190565b600580546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b600061275f60025490565b60000361276a575090565b600061271061277a60c8826139f5565b6127849085613997565b61278e91906139ae565b600a546040516341976e0960e01b81526000600482018190529293506001600160a01b03909116906341976e0990602401602060405180830381865afa1580156127dc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612800919061397e565b905060006305f5e1006128138385613997565b61281d91906139ae565b90506000612829613415565b90508061283560025490565b61283f9084613997565b6121dd91906139ae565b6001600160a01b0382166128735760405163ec442f0560e01b8152600060048201526024016108c7565b61287f600083836132eb565b5050565b60006064612892603284613997565b61289c91906139ae565b9050600060646128ad601985613997565b6128b791906139ae565b9050600060646128c8601986613997565b6128d291906139ae565b9050821561297f576009546040516000916001600160a01b03169085908381818185875af1925050503d8060008114612927576040519150601f19603f3d011682016040523d82523d6000602084013e61292c565b606091505b505090508061297d5760405162461bcd60e51b815260206004820152601a60248201527f4661696c656420746f2073656e642063726561746f722066656500000000000060448201526064016108c7565b505b600061298b8284613952565b1115612a3e576010546000906001600160a01b03166129aa8385613952565b604051600081818185875af1925050503d80600081146129e6576040519150601f19603f3d011682016040523d82523d6000602084013e6129eb565b606091505b5050905080612a3c5760405162461bcd60e51b815260206004820152601b60248201527f4661696c656420746f2073656e6420747265617375727920666565000000000060448201526064016108c7565b505b60408051848152602081018490529081018290527f312c5308f42848705a866c73dec11fd0783c2d64aac6a97e94467062ad3f40589060600160405180910390a150505050565b60008111612aa55760405162461bcd60e51b81526004016108c790613a08565b600b546001600160a01b0316612acd5760405162461bcd60e51b81526004016108c7906139d0565b600854600090612add90836139ae565b905060005b600854811015611e3457600060088281548110612b0157612b01613926565b6000918252602090912001546001600160a01b031690508215612db2576040805160028082526060820183526000926020830190803683375050600c5482519293506001600160a01b031691839150600090612b5f57612b5f613926565b60200260200101906001600160a01b031690816001600160a01b0316815250508181600181518110612b9357612b93613926565b6001600160a01b039283166020918202929092010152600c54600b5460405163095ea7b360e01b815290831660048201526024810187905291169063095ea7b3906044016020604051808303816000875af1158015612bf6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612c1a9190613a3f565b506040516370a0823160e01b81523060048201526000906001600160a01b038416906370a0823190602401602060405180830381865afa158015612c62573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612c86919061397e565b600b549091506001600160a01b0316635c11d7958660018530612cab426104b0613952565b6040518663ffffffff1660e01b8152600401612ccb959493929190613a61565b600060405180830381600087803b158015612ce557600080fd5b505af1925050508015612cf6575060015b612d0257505050612db4565b6040516370a0823160e01b81523060048201526000906001600160a01b038516906370a0823190602401602060405180830381865afa158015612d49573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612d6d919061397e565b90506000612d7b83836139f5565b6001600160a01b0386166000908152600d6020526040812080549293508392909190612da8908490613952565b9091555050505050505b505b80612dbe81613965565b915050612ae2565b600b546000906001600160a01b0316612df15760405162461bcd60e51b81526004016108c7906139d0565b60008211612e505760405162461bcd60e51b815260206004820152602660248201527f53656c6c2070657263656e74616765206d75737420626520677265617465722060448201526507468616e20360d41b60648201526084016108c7565b506000805b600854811015610bd557600060088281548110612e7457612e74613926565b60009182526020808320909101546001600160a01b0316808352600d90915260409091205490915080156131cb576000670de0b6b3a7640000612eb78784613997565b612ec191906139ae565b905080600003612ed3575050506131ce565b6040805160028082526060820183526000926020830190803683370190505090508381600081518110612f0857612f08613926565b6001600160a01b039283166020918202929092010152600c54825191169082906001908110612f3957612f39613926565b6001600160a01b039283166020918202929092010152600b5460405163095ea7b360e01b81529082166004820152602481018490529085169063095ea7b3906044016020604051808303816000875af1158015612f9a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612fbe9190613a3f565b50600c546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a0823190602401602060405180830381865afa158015613008573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061302c919061397e565b600b549091506001600160a01b0316635c11d7958460018530613051426104b0613952565b6040518663ffffffff1660e01b8152600401613071959493929190613a61565b600060405180830381600087803b15801561308b57600080fd5b505af115801561309f573d6000803e3d6000fd5b5050600c546040516370a0823160e01b8152306004820152600093506001600160a01b0390911691506370a0823190602401602060405180830381865afa1580156130ee573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613112919061397e565b9050600061312083836139f5565b905080156131c557600c54604051632e1a7d4d60e01b8152600481018390526001600160a01b0390911690632e1a7d4d90602401600060405180830381600087803b15801561316e57600080fd5b505af1158015613182573d6000803e3d6000fd5b5050505080896131929190613952565b6001600160a01b0388166000908152600d602052604081208054929b5087929091906131bf9084906139f5565b90915550505b50505050505b50505b806131d881613965565b915050612e55565b6001600160a01b03821661320a57604051634b637e8f60e11b8152600060048201526024016108c7565b61287f826000836132eb565b6001600160a01b0384166132405760405163e602df0560e01b8152600060048201526024016108c7565b6001600160a01b03831661326a57604051634a1406b160e11b8152600060048201526024016108c7565b6001600160a01b0380851660009081526001602090815260408083209387168352929052208290558015611ede57826001600160a01b0316846001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925846040516132dd91815260200190565b60405180910390a350505050565b6001600160a01b03831661331657806002600082825461330b9190613952565b909155506133889050565b6001600160a01b038316600090815260208190526040902054818110156133695760405163391434e360e21b81526001600160a01b038516600482015260248101829052604481018390526064016108c7565b6001600160a01b03841660009081526020819052604090209082900390555b6001600160a01b0382166133a4576002805482900390556133c3565b6001600160a01b03821660009081526020819052604090208054820190555b816001600160a01b0316836001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8360405161340891815260200190565b60405180910390a3505050565b600061342060025490565b60000361342d5750600090565b6000805b600854811015610bd55760006008828154811061345057613450613926565b60009182526020808320909101546001600160a01b0316808352600d909152604090912054909150801561351b57600a546040516341976e0960e01b81526001600160a01b03848116600483015260009216906341976e0990602401602060405180830381865afa1580156134c9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906134ed919061397e565b905060006305f5e1006135008385613997565b61350a91906139ae565b90506135168187613952565b955050505b5050808061352890613965565b915050613431565b600060208083528351808285015260005b8181101561355d57858101830151858201604001528201613541565b506000604082860101526040601f19601f8301168501019250505092915050565b80356001600160a01b038116811461359557600080fd5b919050565b600080604083850312156135ad57600080fd5b6135b68361357e565b946020939093013593505050565b6000602082840312156135d657600080fd5b6135df8261357e565b9392505050565b6000806000606084860312156135fb57600080fd5b6136048461357e565b92506136126020850161357e565b9150604084013590509250925092565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff8111828210171561366157613661613622565b604052919050565b600067ffffffffffffffff82111561368357613683613622565b5060051b60200190565b600082601f83011261369e57600080fd5b813560206136b36136ae83613669565b613638565b82815260059290921b840181019181810190868411156136d257600080fd5b8286015b848110156136ed57803583529183019183016136d6565b509695505050505050565b6000806040838503121561370b57600080fd5b823567ffffffffffffffff8082111561372357600080fd5b818501915085601f83011261373757600080fd5b813560206137476136ae83613669565b82815260059290921b8401810191818101908984111561376657600080fd5b948201945b8386101561378b5761377c8661357e565b8252948201949082019061376b565b965050860135925050808211156137a157600080fd5b506137ae8582860161368d565b9150509250929050565b600081518084526020808501945080840160005b838110156137f15781516001600160a01b0316875295820195908201906001016137cc565b509495945050505050565b600081518084526020808501945080840160005b838110156137f157815187529582019590820190600101613810565b60408152600061383f60408301856137b8565b828103602084015261385181856137fc565b95945050505050565b60006020828403121561386c57600080fd5b5035919050565b6020815260006135df60208301846137b8565b6000806040838503121561389957600080fd5b6138a28361357e565b91506138b06020840161357e565b90509250929050565b6060815260006138cc60608301866137b8565b82810360208401526138de81866137fc565b905082810360408401526121dd81856137fc565b600181811c9082168061390657607f821691505b602082108103610bd557634e487b7160e01b600052602260045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b808201808211156108715761087161393c565b6000600182016139775761397761393c565b5060010190565b60006020828403121561399057600080fd5b5051919050565b80820281158282048414176108715761087161393c565b6000826139cb57634e487b7160e01b600052601260045260246000fd5b500490565b6020808252600b908201526a111156081b9bdd081cd95d60aa1b604082015260600190565b818103818111156108715761087161393c565b6020808252601d908201527f416d6f756e74206d7573742062652067726561746572207468616e2030000000604082015260600190565b600060208284031215613a5157600080fd5b815180151581146135df57600080fd5b85815284602082015260a060408201526000613a8060a08301866137b8565b6001600160a01b0394909416606083015250608001529392505050565b828152604060208201526000613ab660408301846137b8565b949350505050565b60006020808385031215613ad157600080fd5b825167ffffffffffffffff811115613ae857600080fd5b8301601f81018513613af957600080fd5b8051613b076136ae82613669565b81815260059190911b82018301908381019087831115613b2657600080fd5b928401925b82841015613b4457835182529284019290840190613b2b565b97965050505050505056fea264697066735822122094f9324025a7e1eb9019b5610634d12ecaa4f08ebbd6c4022671553d7c2505ef64736f6c63430008140033a2646970667358221220f9ef0677176f6f8d2c7eeb5420778371afd7b65f88c54e8856cf98a39923369d64736f6c63430008140033",
  "deployedBytecode": "0x60806040523480156200001157600080fd5b5060043610620001695760003560e01c80637a862c6a11620000d3578063aef1be9a1162000086578063aef1be9a146200031e578063d8c149e0146200034a578063dce0b4e41462000361578063df12f8c51462000371578063eb8bbd281462000397578063f2fde38b14620003a057600080fd5b80637a862c6a146200028d5780637b8e889514620002b35780637dc0d1d014620002ca5780637f51bb1f14620002de57806387f4637b14620002f55780638da5cb5b146200030c57600080fd5b806352c8df64116200012c57806352c8df6414620001fd57806361d027b31462000227578063658bb543146200023b578063692058c2146200024f578063715018a6146200026357806374b4eafe146200026d57600080fd5b8063117be4c2146200016e57806319dc94a6146200019f5780631bd6090014620001b85780631cb44dfc14620001cf5780631fa241bb14620001e6575b600080fd5b60055462000182906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b620001b6620001b0366004620012b2565b620003b7565b005b620001b6620001c9366004620012b2565b62000437565b620001b6620001e0366004620012b2565b620004b1565b620001b6620001f73660046200143e565b6200052e565b620002146200020e3660046200155b565b62000bc1565b6040516200019695949392919062001641565b60035462000182906001600160a01b031681565b60015462000182906001600160a01b031681565b60045462000182906001600160a01b031681565b620001b662000dfb565b6200027e683635c9adc5dea0000081565b60405190815260200162000196565b620002a46200029e366004620016b3565b62000e13565b604051620001969190620016d6565b62000182620002c43660046200155b565b62000ff8565b60025462000182906001600160a01b031681565b620001b6620002ef366004620012b2565b62001023565b620001b662000306366004620012b2565b620010a7565b6000546001600160a01b031662000182565b620001826200032f3660046200155b565b6007602052600090815260409020546001600160a01b031681565b6200027e6200035b366004620016eb565b6200112b565b683635c9adc5dea000006200027e565b6200038862000382366004620012b2565b6200115d565b6040516200019691906200171a565b6006546200027e565b620001b6620003b1366004620012b2565b620011cb565b620003c16200120f565b6001600160a01b038116620004155760405162461bcd60e51b8152602060048201526015602482015274496e76616c6964205741564158206164647265737360581b60448201526064015b60405180910390fd5b600580546001600160a01b0319166001600160a01b0392909216919091179055565b620004416200120f565b6001600160a01b0381166200048f5760405162461bcd60e51b8152602060048201526013602482015272496e76616c696420444558206164647265737360681b60448201526064016200040c565b600480546001600160a01b0319166001600160a01b0392909216919091179055565b620004bb6200120f565b6001600160a01b0381166200050c5760405162461bcd60e51b8152602060048201526016602482015275496e76616c6964206f7261636c65206164647265737360501b60448201526064016200040c565b600280546001600160a01b0319166001600160a01b0392909216919091179055565b6000845111620005815760405162461bcd60e51b815260206004820152601960248201527f46756e64206e616d652063616e6e6f7420626520656d7074790000000000000060448201526064016200040c565b6000835111620005d45760405162461bcd60e51b815260206004820152601b60248201527f46756e64207469636b65722063616e6e6f7420626520656d707479000000000060448201526064016200040c565b6000825111620006275760405162461bcd60e51b815260206004820152601c60248201527f4d7573742068617665206174206c65617374206f6e6520746f6b656e0000000060448201526064016200040c565b6014825111156200067b5760405162461bcd60e51b815260206004820152601a60248201527f4d6178696d756d20323020746f6b656e73207065722066756e6400000000000060448201526064016200040c565b8051825114620006dc5760405162461bcd60e51b815260206004820152602560248201527f546f6b656e7320616e642077656967687461676573206c656e677468206d69736044820152640dac2e8c6d60db1b60648201526084016200040c565b6000805b8351811015620008de5760006001600160a01b03168482815181106200070a576200070a6200172f565b60200260200101516001600160a01b031603620007625760405162461bcd60e51b8152602060048201526015602482015274496e76616c696420746f6b656e206164647265737360581b60448201526064016200040c565b60008382815181106200077957620007796200172f565b602002602001015111620007d05760405162461bcd60e51b815260206004820181905260248201527f576569676874616765206d7573742062652067726561746572207468616e203060448201526064016200040c565b828181518110620007e557620007e56200172f565b602002602001015182620007fa91906200175b565b915060006200080b8260016200175b565b90505b8451811015620008c8578481815181106200082d576200082d6200172f565b60200260200101516001600160a01b03168583815181106200085357620008536200172f565b60200260200101516001600160a01b031603620008b35760405162461bcd60e51b815260206004820152601c60248201527f4475706c696361746520746f6b656e73206e6f7420616c6c6f7765640000000060448201526064016200040c565b80620008bf8162001771565b9150506200080e565b5080620008d58162001771565b915050620006e0565b508061271014620009325760405162461bcd60e51b815260206004820152601c60248201527f546f74616c20776569676874616765206d75737420626520313030250000000060448201526064016200040c565b6001546040516370a0823160e01b8152336004820152683635c9adc5dea00000916001600160a01b0316906370a0823190602401602060405180830381865afa15801562000984573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620009aa91906200178d565b101562000a115760405162461bcd60e51b815260206004820152602e60248201527f496e73756666696369656e74204147492062616c616e636520666f722066756e60448201526d64206372656174696f6e2066656560901b60648201526084016200040c565b60015460405163079cc67960e41b8152336004820152683635c9adc5dea0000060248201526001600160a01b03909116906379cc679090604401600060405180830381600087803b15801562000a6657600080fd5b505af115801562000a7b573d6000803e3d6000fd5b5050600254600354600454600554604051600096508b95508a948a948a9433946001600160a01b0393841694928416939182169291169062000abd906200128e565b62000ad199989796959493929190620017a7565b604051809103906000f08015801562000aee573d6000803e3d6000fd5b506006805460018082019092557ff652222313e28459528d920b65115c16c04f3efc82aaedc97be59f3f377c0d3f810180546001600160a01b0385166001600160a01b03199182168117909255600083815260076020908152604080832080549094169094179092553380825260088352838220805496870181558252919020909301829055519293509182907fed347e9f5d6a8c19fdf08c48cd262b1de465d28cb92c4032b2af21f0d3eef93f9062000bb0908b908b9088908c906200183e565b60405180910390a350505050505050565b6000606080606080600680549050861062000c155760405162461bcd60e51b8152602060048201526013602482015272119d5b9908191bd95cc81b9bdd08195e1a5cdd606a1b60448201526064016200040c565b60006006878154811062000c2d5762000c2d6200172f565b600091825260208220015460408051639ce1413b60e01b815290516001600160a01b0390921698508893508392639ce1413b926004808401938290030181865afa15801562000c80573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405262000caa919081019062001897565b9450806001600160a01b031663c0e547a36040518163ffffffff1660e01b8152600401600060405180830381865afa15801562000ceb573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405262000d15919081019062001897565b9350806001600160a01b031663d95bd6c96040518163ffffffff1660e01b8152600401600060405180830381865afa15801562000d56573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405262000d80919081019062001984565b9250806001600160a01b03166341b6b81e6040518163ffffffff1660e01b8152600401600060405180830381865afa15801562000dc1573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405262000deb9190810190620019c5565b9050809250505091939590929450565b62000e056200120f565b62000e1160006200123e565b565b600654606090831062000e695760405162461bcd60e51b815260206004820152601960248201527f537461727420696e646578206f7574206f6620626f756e64730000000000000060448201526064016200040c565b60065482111562000ebd5760405162461bcd60e51b815260206004820152601760248201527f456e6420696e646578206f7574206f6620626f756e647300000000000000000060448201526064016200040c565b8183111562000f055760405162461bcd60e51b8152602060048201526013602482015272496e76616c696420696e6465782072616e676560681b60448201526064016200040c565b600062000f13848462001a8c565b905060008167ffffffffffffffff81111562000f335762000f33620012d9565b60405190808252806020026020018201604052801562000f5d578160200160208202803683370190505b50905060005b8281101562000fed57600662000f7a82886200175b565b8154811062000f8d5762000f8d6200172f565b9060005260206000200160009054906101000a90046001600160a01b031682828151811062000fc05762000fc06200172f565b6001600160a01b03909216602092830291909101909101528062000fe48162001771565b91505062000f63565b509150505b92915050565b600681815481106200100957600080fd5b6000918252602090912001546001600160a01b0316905081565b6200102d6200120f565b6001600160a01b038116620010855760405162461bcd60e51b815260206004820152601860248201527f496e76616c69642074726561737572792061646472657373000000000000000060448201526064016200040c565b600380546001600160a01b0319166001600160a01b0392909216919091179055565b620010b16200120f565b6001600160a01b038116620011095760405162461bcd60e51b815260206004820152601960248201527f496e76616c69642041474920746f6b656e20616464726573730000000000000060448201526064016200040c565b600180546001600160a01b0319166001600160a01b0392909216919091179055565b600860205281600052604060002081815481106200114857600080fd5b90600052602060002001600091509150505481565b6001600160a01b038116600090815260086020908152604091829020805483518184028101840190945280845260609392830182828015620011bf57602002820191906000526020600020905b815481526020019060010190808311620011aa575b50505050509050919050565b620011d56200120f565b6001600160a01b0381166200120157604051631e4fbdf760e01b8152600060048201526024016200040c565b6200120c816200123e565b50565b6000546001600160a01b0316331462000e115760405163118cdaa760e01b81523360048201526024016200040c565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6144998062001aa383390190565b6001600160a01b03811681146200120c57600080fd5b600060208284031215620012c557600080fd5b8135620012d2816200129c565b9392505050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff811182821017156200131b576200131b620012d9565b604052919050565b600067ffffffffffffffff821115620013405762001340620012d9565b50601f01601f191660200190565b600082601f8301126200136057600080fd5b813562001377620013718262001323565b620012ef565b8181528460208386010111156200138d57600080fd5b816020850160208301376000918101602001919091529392505050565b600067ffffffffffffffff821115620013c757620013c7620012d9565b5060051b60200190565b600082601f830112620013e357600080fd5b81356020620013f66200137183620013aa565b82815260059290921b840181019181810190868411156200141657600080fd5b8286015b848110156200143357803583529183019183016200141a565b509695505050505050565b600080600080608085870312156200145557600080fd5b843567ffffffffffffffff808211156200146e57600080fd5b6200147c888389016200134e565b95506020915081870135818111156200149457600080fd5b620014a289828a016200134e565b955050604087013581811115620014b857600080fd5b8701601f81018913620014ca57600080fd5b8035620014db6200137182620013aa565b81815260059190911b8201840190848101908b831115620014fb57600080fd5b928501925b828410156200152657833562001516816200129c565b8252928501929085019062001500565b965050505060608701359150808211156200154057600080fd5b506200154f87828801620013d1565b91505092959194509250565b6000602082840312156200156e57600080fd5b5035919050565b60005b838110156200159257818101518382015260200162001578565b50506000910152565b60008151808452620015b581602086016020860162001575565b601f01601f19169290920160200192915050565b600081518084526020808501945080840160005b83811015620016045781516001600160a01b031687529582019590820190600101620015dd565b509495945050505050565b600081518084526020808501945080840160005b83811015620016045781518752958201959082019060010162001623565b6001600160a01b038616815260a06020820181905260009062001667908301876200159b565b82810360408401526200167b81876200159b565b90508281036060840152620016918186620015c9565b90508281036080840152620016a781856200160f565b98975050505050505050565b60008060408385031215620016c757600080fd5b50508035926020909101359150565b602081526000620012d26020830184620015c9565b60008060408385031215620016ff57600080fd5b82356200170c816200129c565b946020939093013593505050565b602081526000620012d260208301846200160f565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b8082018082111562000ff25762000ff262001745565b60006001820162001786576200178662001745565b5060010190565b600060208284031215620017a057600080fd5b5051919050565b6000610120808352620017bd8184018d6200159b565b90508281036020840152620017d3818c6200159b565b90508281036040840152620017e9818b620015c9565b90508281036060840152620017ff818a6200160f565b6001600160a01b03988916608085015296881660a0840152505092851660c084015290841660e083015290921661010090920191909152949350505050565b6080815260006200185360808301876200159b565b82810360208401526200186781876200159b565b6001600160a01b0386166040850152838103606085015290506200188c8185620015c9565b979650505050505050565b600060208284031215620018aa57600080fd5b815167ffffffffffffffff811115620018c257600080fd5b8201601f81018413620018d457600080fd5b8051620018e5620013718262001323565b818152856020838501011115620018fb57600080fd5b6200190e82602083016020860162001575565b95945050505050565b600082601f8301126200192957600080fd5b815160206200193c6200137183620013aa565b82815260059290921b840181019181810190868411156200195c57600080fd5b8286015b848110156200143357805162001976816200129c565b835291830191830162001960565b6000602082840312156200199757600080fd5b815167ffffffffffffffff811115620019af57600080fd5b620019bd8482850162001917565b949350505050565b60008060408385031215620019d957600080fd5b825167ffffffffffffffff80821115620019f257600080fd5b62001a008683870162001917565b935060209150818501518181111562001a1857600080fd5b85019050601f8101861362001a2c57600080fd5b805162001a3d6200137182620013aa565b81815260059190911b8201830190838101908883111562001a5d57600080fd5b928401925b8284101562001a7d5783518252928401929084019062001a62565b80955050505050509250929050565b8181038181111562000ff25762000ff26200174556fe60806040523480156200001157600080fd5b50604051620044993803806200449983398101604081905262000034916200062e565b8489896003620000458382620007d4565b506004620000548282620007d4565b5050506001600160a01b0381166200008757604051631e4fbdf760e01b8152600060048201526024015b60405180910390fd5b620000928162000364565b508551875114620000f45760405162461bcd60e51b815260206004820152602560248201527f546f6b656e7320616e642077656967687461676573206c656e677468206d69736044820152640dac2e8c6d60db1b60648201526084016200007e565b6000875111620001475760405162461bcd60e51b815260206004820152601c60248201527f4d7573742068617665206174206c65617374206f6e6520746f6b656e0000000060448201526064016200007e565b6006620001558a82620007d4565b506007620001648982620007d4565b5086516200017a9060089060208a0190620003b6565b50600980546001600160a01b03199081166001600160a01b0388811691909117909255600a80548216878416179055601080548216868416179055600b80548216858416179055600c80549091169183169190911790556000805b8851811015620002f0576000888281518110620001f657620001f6620008a0565b6020026020010151116200024d5760405162461bcd60e51b815260206004820181905260248201527f576569676874616765206d7573742062652067726561746572207468616e203060448201526064016200007e565b878181518110620002625762000262620008a0565b6020026020010151600e60008b8481518110620002835762000283620008a0565b60200260200101516001600160a01b03166001600160a01b0316815260200190815260200160002081905550878181518110620002c457620002c4620008a0565b602002602001015182620002d99190620008cc565b915080620002e781620008e8565b915050620001d5565b506127108114620003445760405162461bcd60e51b815260206004820152601c60248201527f546f74616c20776569676874616765206d75737420626520313030250000000060448201526064016200007e565b600f819055620003548662000364565b5050505050505050505062000904565b600580546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b8280548282559060005260206000209081019282156200040e579160200282015b828111156200040e57825182546001600160a01b0319166001600160a01b03909116178255602090920191600190910190620003d7565b506200041c92915062000420565b5090565b5b808211156200041c576000815560010162000421565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f191681016001600160401b038111828210171562000478576200047862000437565b604052919050565b600082601f8301126200049257600080fd5b81516001600160401b03811115620004ae57620004ae62000437565b6020620004c4601f8301601f191682016200044d565b8281528582848701011115620004d957600080fd5b60005b83811015620004f9578581018301518282018401528201620004dc565b506000928101909101919091529392505050565b60006001600160401b0382111562000529576200052962000437565b5060051b60200190565b80516001600160a01b03811681146200054b57600080fd5b919050565b600082601f8301126200056257600080fd5b815160206200057b62000575836200050d565b6200044d565b82815260059290921b840181019181810190868411156200059b57600080fd5b8286015b84811015620005c157620005b38162000533565b83529183019183016200059f565b509695505050505050565b600082601f830112620005de57600080fd5b81516020620005f162000575836200050d565b82815260059290921b840181019181810190868411156200061157600080fd5b8286015b84811015620005c1578051835291830191830162000615565b60008060008060008060008060006101208a8c0312156200064e57600080fd5b89516001600160401b03808211156200066657600080fd5b620006748d838e0162000480565b9a5060208c01519150808211156200068b57600080fd5b620006998d838e0162000480565b995060408c0151915080821115620006b057600080fd5b620006be8d838e0162000550565b985060608c0151915080821115620006d557600080fd5b50620006e48c828d01620005cc565b965050620006f560808b0162000533565b94506200070560a08b0162000533565b93506200071560c08b0162000533565b92506200072560e08b0162000533565b9150620007366101008b0162000533565b90509295985092959850929598565b600181811c908216806200075a57607f821691505b6020821081036200077b57634e487b7160e01b600052602260045260246000fd5b50919050565b601f821115620007cf57600081815260208120601f850160051c81016020861015620007aa5750805b601f850160051c820191505b81811015620007cb57828155600101620007b6565b5050505b505050565b81516001600160401b03811115620007f057620007f062000437565b620008088162000801845462000745565b8462000781565b602080601f831160018114620008405760008415620008275750858301515b600019600386901b1c1916600185901b178555620007cb565b600085815260208120601f198616915b82811015620008715788860151825594840194600190910190840162000850565b5085821015620008905787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b80820180821115620008e257620008e2620008b6565b92915050565b600060018201620008fd57620008fd620008b6565b5060010190565b613b8580620009146000396000f3fe6080604052600436106102605760003560e01c8063715018a611610144578063a9059cbb116100b6578063dd62ed3e1161007a578063dd62ed3e146106cb578063e4849b3214610711578063f09d14d714610731578063f2fde38b14610755578063f359ced514610775578063fb5825ba146107ab57600080fd5b8063a9059cbb14610649578063c0e547a314610669578063cfa498a31461067e578063d95bd6c914610694578063da23eb63146106b657600080fd5b806395d89b411161010857806395d89b41146105cd5780639ce1413b146105e2578063a3bf224b146105f7578063a525ad3c14610617578063a5c6e8ed1461062c578063a6f2ae3a1461064157600080fd5b8063715018a61461055a5780637dc0d1d01461056f5780637f51bb1f1461058f57806383d5e726146102fb5780638da5cb5b146105af57600080fd5b80632a033d2a116101dd5780634e1d486b116101a15780634e1d486b146104745780634fb8d7491461048a578063523fba7f146104b757806361d027b3146104e4578063692058c21461050457806370a082311461052457600080fd5b80632a033d2a146103ca5780632be01190146103df578063313ce567146103ff5780633aecd0e31461041b57806341b6b81e1461045157600080fd5b806318160ddd1161022457806318160ddd1461033e5780631bd60900146103535780631cb44dfc1461037557806323b872dd1461039557806324dd7c93146103b557600080fd5b806302d05d3f1461026c57806306fdde03146102a9578063095ea7b3146102cb5780630d1f2403146102fb578063117be4c21461031e57600080fd5b3661026757005b600080fd5b34801561027857600080fd5b5060095461028c906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b3480156102b557600080fd5b506102be6107cb565b6040516102a09190613530565b3480156102d757600080fd5b506102eb6102e636600461359a565b61085d565b60405190151581526020016102a0565b34801561030757600080fd5b50610310601981565b6040519081526020016102a0565b34801561032a57600080fd5b50600c5461028c906001600160a01b031681565b34801561034a57600080fd5b50600254610310565b34801561035f57600080fd5b5061037361036e3660046135c4565b610877565b005b34801561038157600080fd5b506103736103903660046135c4565b6108f2565b3480156103a157600080fd5b506102eb6103b03660046135e6565b61096b565b3480156103c157600080fd5b506102eb61098f565b3480156103d657600080fd5b50610310610a02565b3480156103eb57600080fd5b506103736103fa3660046136f8565b610bdb565b34801561040b57600080fd5b50604051601281526020016102a0565b34801561042757600080fd5b506103106104363660046135c4565b6001600160a01b03166000908152600d602052604090205490565b34801561045d57600080fd5b50610466611494565b6040516102a092919061382c565b34801561048057600080fd5b50610310600f5481565b34801561049657600080fd5b506103106104a53660046135c4565b600e6020526000908152604090205481565b3480156104c357600080fd5b506103106104d23660046135c4565b600d6020526000908152604090205481565b3480156104f057600080fd5b5060105461028c906001600160a01b031681565b34801561051057600080fd5b50600b5461028c906001600160a01b031681565b34801561053057600080fd5b5061031061053f3660046135c4565b6001600160a01b031660009081526020819052604090205490565b34801561056657600080fd5b506103736115bc565b34801561057b57600080fd5b50600a5461028c906001600160a01b031681565b34801561059b57600080fd5b506103736105aa3660046135c4565b6115d0565b3480156105bb57600080fd5b506005546001600160a01b031661028c565b3480156105d957600080fd5b506102be611650565b3480156105ee57600080fd5b506102be61165f565b34801561060357600080fd5b5061028c61061236600461385a565b6116ed565b34801561062357600080fd5b50610310606481565b34801561063857600080fd5b5061031060c881565b610373611717565b34801561065557600080fd5b506102eb61066436600461359a565b61190e565b34801561067557600080fd5b506102be61191c565b34801561068a57600080fd5b5061031061271081565b3480156106a057600080fd5b506106a9611929565b6040516102a09190613873565b3480156106c257600080fd5b50610310603281565b3480156106d757600080fd5b506103106106e6366004613886565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b34801561071d57600080fd5b5061037361072c36600461385a565b61198a565b34801561073d57600080fd5b50610746611bfc565b6040516102a0939291906138b9565b34801561076157600080fd5b506103736107703660046135c4565b611dcb565b34801561078157600080fd5b506103106107903660046135c4565b6001600160a01b03166000908152600e602052604090205490565b3480156107b757600080fd5b506103106107c63660046135c4565b611e09565b6060600380546107da906138f2565b80601f0160208091040260200160405190810160405280929190818152602001828054610806906138f2565b80156108535780601f1061082857610100808354040283529160200191610853565b820191906000526020600020905b81548152906001019060200180831161083657829003601f168201915b5050505050905090565b60003361086b818585611e27565b60019150505b92915050565b61087f611e39565b6001600160a01b0381166108d05760405162461bcd60e51b8152602060048201526013602482015272496e76616c696420444558206164647265737360681b60448201526064015b60405180910390fd5b600b80546001600160a01b0319166001600160a01b0392909216919091179055565b6108fa611e39565b6001600160a01b0381166109495760405162461bcd60e51b8152602060048201526016602482015275496e76616c6964206f7261636c65206164647265737360501b60448201526064016108c7565b600a80546001600160a01b0319166001600160a01b0392909216919091179055565b600033610979858285611e66565b610984858585611ee4565b506001949350505050565b600080805b6008548110156109f857600e6000600883815481106109b5576109b5613926565b60009182526020808320909101546001600160a01b031683528201929092526040019020546109e49083613952565b9150806109f081613965565b915050610994565b5061271014919050565b6000610a0d60025490565b600003610a1a5750600090565b6000805b600854811015610bd557600060088281548110610a3d57610a3d613926565b60009182526020808320909101546001600160a01b0316808352600d9091526040909120549091508015610bc057600a546040516341976e0960e01b81526001600160a01b03848116600483015260009216906341976e0990602401602060405180830381865afa158015610ab6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ada919061397e565b600a546040516341976e0960e01b81526000600482018190529293506001600160a01b03909116906341976e0990602401602060405180830381865afa158015610b28573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b4c919061397e565b9050600082118015610b5e5750600081115b15610bb05760006305f5e100610b748486613997565b610b7e91906139ae565b9050600082610b91836305f5e100613997565b610b9b91906139ae565b9050610ba78189613952565b97505050610bbd565b610bba8387613952565b95505b50505b50508080610bcd90613965565b915050610a1e565b50919050565b610be3611e39565b8051825114610c425760405162461bcd60e51b815260206004820152602560248201527f546f6b656e7320616e642077656967687461676573206c656e677468206d69736044820152640dac2e8c6d60db1b60648201526084016108c7565b6000825111610c935760405162461bcd60e51b815260206004820152601c60248201527f4d7573742068617665206174206c65617374206f6e6520746f6b656e0000000060448201526064016108c7565b600b546001600160a01b0316610cbb5760405162461bcd60e51b81526004016108c7906139d0565b6000805b8351811015610d6a576000838281518110610cdc57610cdc613926565b602002602001015111610d315760405162461bcd60e51b815260206004820181905260248201527f576569676874616765206d7573742062652067726561746572207468616e203060448201526064016108c7565b828181518110610d4357610d43613926565b602002602001015182610d569190613952565b915080610d6281613965565b915050610cbf565b506127108114610dbc5760405162461bcd60e51b815260206004820152601c60248201527f546f74616c20776569676874616765206d75737420626520313030250000000060448201526064016108c7565b6000306001600160a01b0316632a033d2a6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610dfc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e20919061397e565b905060008111610e725760405162461bcd60e51b815260206004820152601a60248201527f4e6f2066756e642076616c756520746f20726562616c616e636500000000000060448201526064016108c7565b60005b8451811015610f7757600a5485516000916001600160a01b0316906341976e0990889085908110610ea857610ea8613926565b60200260200101516040518263ffffffff1660e01b8152600401610edb91906001600160a01b0391909116815260200190565b602060405180830381865afa158015610ef8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f1c919061397e565b905060008111610f645760405162461bcd60e51b8152602060048201526013602482015272496e76616c696420746f6b656e20707269636560681b60448201526064016108c7565b5080610f6f81613965565b915050610e75565b50600a546040516341976e0960e01b8152600060048201819052916001600160a01b0316906341976e0990602401602060405180830381865afa158015610fc2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fe6919061397e565b90506000811161102d5760405162461bcd60e51b8152602060048201526012602482015271496e76616c6964204156415820707269636560701b60448201526064016108c7565b6000855167ffffffffffffffff81111561104957611049613622565b604051908082528060200260200182016040528015611072578160200160208202803683370190505b50905060005b865181101561120557600087828151811061109557611095613926565b6020026020010151905060006127108884815181106110b6576110b6613926565b6020026020010151876110c99190613997565b6110d391906139ae565b600a546040516341976e0960e01b81526001600160a01b038581166004830152929350600092909116906341976e0990602401602060405180830381865afa158015611123573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611147919061397e565b600a546040516341976e0960e01b81526000600482018190529293506001600160a01b03909116906341976e0990602401602060405180830381865afa158015611195573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111b9919061397e565b9050816111c68285613997565b6111d091906139ae565b8686815181106111e2576111e2613926565b6020026020010181815250505050505080806111fd90613965565b915050611078565b5060005b86518110156113d057600087828151811061122657611226613926565b602002602001015190506000600d6000836001600160a01b03166001600160a01b03168152602001908152602001600020549050600084848151811061126e5761126e613926565b602002602001015190508082146113ba57808211156112d357600061129382846139f5565b905080156112cd5760006112a78583611f43565b905080156112cb576001600160a01b0385166000908152600d602052604090208390555b505b506113ba565b818111156113ba5760006112e783836139f5565b905080156113b85760006112fb85836121e7565b90506000811180156113775750600c546040516370a0823160e01b815230600482015282916001600160a01b0316906370a0823190602401602060405180830381865afa158015611350573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611374919061397e565b10155b156113b657600061138886836124a9565b905080156113b45761139a8186613952565b6001600160a01b0387166000908152600d60205260409020555b505b505b505b50505080806113c890613965565b915050611209565b5060005b865181101561144c578581815181106113ef576113ef613926565b6020026020010151600e600089848151811061140d5761140d613926565b60200260200101516001600160a01b03166001600160a01b0316815260200190815260200160002081905550808061144490613965565b9150506113d4565b50600f8490556040517fe62c3b4fb96e6461a60aae181b58c3bea82937a33a60ed89e592c0a4b4933aa990611484908890889061382c565b60405180910390a1505050505050565b60608060088054806020026020016040519081016040528092919081815260200182805480156114ed57602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116114cf575b5050600854939550505067ffffffffffffffff821115905061151157611511613622565b60405190808252806020026020018201604052801561153a578160200160208202803683370190505b50905060005b6008548110156115b757600e60006008838154811061156157611561613926565b60009182526020808320909101546001600160a01b03168352820192909252604001902054825183908390811061159a5761159a613926565b6020908102919091010152806115af81613965565b915050611540565b509091565b6115c4611e39565b6115ce6000612702565b565b6115d8611e39565b6001600160a01b03811661162e5760405162461bcd60e51b815260206004820152601860248201527f496e76616c69642074726561737572792061646472657373000000000000000060448201526064016108c7565b601080546001600160a01b0319166001600160a01b0392909216919091179055565b6060600480546107da906138f2565b6006805461166c906138f2565b80601f0160208091040260200160405190810160405280929190818152602001828054611698906138f2565b80156116e55780601f106116ba576101008083540402835291602001916116e5565b820191906000526020600020905b8154815290600101906020018083116116c857829003601f168201915b505050505081565b600881815481106116fd57600080fd5b6000918252602090912001546001600160a01b0316905081565b600034116117585760405162461bcd60e51b815260206004820152600e60248201526d09aeae6e840e6cadcc84082ac82b60931b60448201526064016108c7565b60085461179e5760405162461bcd60e51b81526020600482015260146024820152734e6f20756e6465726c79696e6720746f6b656e7360601b60448201526064016108c7565b60006127106117ae606434613997565b6117b891906139ae565b905060006117c682346139f5565b905060006117d382612754565b90506117df3382612849565b6117e883612883565b600c60009054906101000a90046001600160a01b03166001600160a01b031663d0e30db0836040518263ffffffff1660e01b81526004016000604051808303818588803b15801561183857600080fd5b505af115801561184c573d6000803e3d6000fd5b5050600c546040516370a0823160e01b81523060048201526118c694506001600160a01b0390911692506370a082319150602401602060405180830381865afa15801561189d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118c1919061397e565b612a85565b604080513481526020810183905290810184905233907f0f18542593f463db9b35ce49dfef2fa3e7b5976b7dbfd9a901dd384d2da16da49060600160405180910390a2505050565b60003361086b818585611ee4565b6007805461166c906138f2565b6060600880548060200260200160405190810160405280929190818152602001828054801561085357602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311611963575050505050905090565b600081116119aa5760405162461bcd60e51b81526004016108c790613a08565b33600090815260208190526040902054811115611a095760405162461bcd60e51b815260206004820152601860248201527f496e73756666696369656e742066756e6420746f6b656e73000000000000000060448201526064016108c7565b6000611a1460025490565b11611a615760405162461bcd60e51b815260206004820152601d60248201527f4e6f2066756e6420746f6b656e7320696e2063697263756c6174696f6e00000060448201526064016108c7565b6000611a6c60025490565b611a7e83670de0b6b3a7640000613997565b611a8891906139ae565b90506000611a9582612dc6565b905060008111611adc5760405162461bcd60e51b81526020600482015260126024820152712737903b30b63ab2903a37903932ba3ab93760711b60448201526064016108c7565b6000612710611aec606484613997565b611af691906139ae565b90506000611b0482846139f5565b9050611b1033866131e0565b611b1982612883565b604051600090339083908381818185875af1925050503d8060008114611b5b576040519150601f19603f3d011682016040523d82523d6000602084013e611b60565b606091505b5050905080611bb15760405162461bcd60e51b815260206004820152601760248201527f4661696c656420746f207472616e73666572204156415800000000000000000060448201526064016108c7565b604080518781526020810184905290810184905233907fcb8b579dfe6e9168d68023b09b7de38effbd57bc37422ed8b5718ca997730d589060600160405180910390a2505050505050565b60608060606008805480602002602001604051908101604052809291908181526020018280548015611c5757602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311611c39575b5050600854939650505067ffffffffffffffff8211159050611c7b57611c7b613622565b604051908082528060200260200182016040528015611ca4578160200160208202803683370190505b5060085490925067ffffffffffffffff811115611cc357611cc3613622565b604051908082528060200260200182016040528015611cec578160200160208202803683370190505b50905060005b600854811015611dc557600d600060088381548110611d1357611d13613926565b60009182526020808320909101546001600160a01b031683528201929092526040019020548351849083908110611d4c57611d4c613926565b602002602001018181525050600e600060088381548110611d6f57611d6f613926565b60009182526020808320909101546001600160a01b031683528201929092526040019020548251839083908110611da857611da8613926565b602090810291909101015280611dbd81613965565b915050611cf2565b50909192565b611dd3611e39565b6001600160a01b038116611dfd57604051631e4fbdf760e01b8152600060048201526024016108c7565b611e0681612702565b50565b6001600160a01b038116600090815260208190526040812054610871565b611e348383836001613216565b505050565b6005546001600160a01b031633146115ce5760405163118cdaa760e01b81523360048201526024016108c7565b6001600160a01b038381166000908152600160209081526040808320938616835292905220546000198114611ede5781811015611ecf57604051637dc7a0d960e11b81526001600160a01b038416600482015260248101829052604481018390526064016108c7565b611ede84848484036000613216565b50505050565b6001600160a01b038316611f0e57604051634b637e8f60e11b8152600060048201526024016108c7565b6001600160a01b038216611f385760405163ec442f0560e01b8152600060048201526024016108c7565b611e348383836132eb565b600b546000906001600160a01b0316611f6e5760405162461bcd60e51b81526004016108c7906139d0565b60008211611f8e5760405162461bcd60e51b81526004016108c790613a08565b600b5460405163095ea7b360e01b81526001600160a01b039182166004820152602481018490529084169063095ea7b3906044016020604051808303816000875af1158015611fe1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120059190613a3f565b50604080516002808252606082018352600092602083019080368337019050509050838160008151811061203b5761203b613926565b6001600160a01b039283166020918202929092010152600c5482519116908290600190811061206c5761206c613926565b6001600160a01b039283166020918202929092010152600c546040516370a0823160e01b815230600482015260009291909116906370a0823190602401602060405180830381865afa1580156120c6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120ea919061397e565b600b549091506001600160a01b0316635c11d795856001853061210f426104b0613952565b6040518663ffffffff1660e01b815260040161212f959493929190613a61565b600060405180830381600087803b15801561214957600080fd5b505af115801561215d573d6000803e3d6000fd5b5050600c546040516370a0823160e01b8152306004820152600093506001600160a01b0390911691506370a08231906024015b602060405180830381865afa1580156121ad573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121d1919061397e565b90506121dd82826139f5565b9695505050505050565b600b546000906001600160a01b03166122125760405162461bcd60e51b81526004016108c7906139d0565b6000821161226e5760405162461bcd60e51b815260206004820152602360248201527f546f6b656e20616d6f756e74206d75737420626520677265617465722074686160448201526206e20360ec1b60648201526084016108c7565b6040805160028082526060820183526000926020830190803683375050600c5482519293506001600160a01b0316918391506000906122af576122af613926565b60200260200101906001600160a01b031690816001600160a01b03168152505083816001815181106122e3576122e3613926565b6001600160a01b039283166020918202929092010152600b546040516307c0329d60e21b8152911690631f00ca74906123229086908590600401613a9d565b600060405180830381865afa92505050801561236057506040513d6000823e601f3d908101601f1916820160405261235d9190810190613abe565b60015b61247b57600a546040516341976e0960e01b81526001600160a01b03868116600483015260009216906341976e0990602401602060405180830381865afa1580156123af573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123d3919061397e565b600a546040516341976e0960e01b81526000600482018190529293506001600160a01b03909116906341976e0990602401602060405180830381865afa158015612421573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612445919061397e565b90506000821180156124575750600081115b1561247457806124678387613997565b61247191906139ae565b93505b50506124a2565b8051156124a0578060008151811061249557612495613926565b602002602001015192505b505b5092915050565b600b546000906001600160a01b03166124d45760405162461bcd60e51b81526004016108c7906139d0565b600082116124f45760405162461bcd60e51b81526004016108c790613a08565b600c54600b5460405163095ea7b360e01b81526001600160a01b0391821660048201526024810185905291169063095ea7b3906044016020604051808303816000875af1158015612549573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061256d9190613a3f565b506040805160028082526060820183526000926020830190803683375050600c5482519293506001600160a01b0316918391506000906125af576125af613926565b60200260200101906001600160a01b031690816001600160a01b03168152505083816001815181106125e3576125e3613926565b6001600160a01b0392831660209182029290920101526040516370a0823160e01b81523060048201526000918616906370a0823190602401602060405180830381865afa158015612638573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061265c919061397e565b600b549091506001600160a01b0316635c11d7958560018530612681426104b0613952565b6040518663ffffffff1660e01b81526004016126a1959493929190613a61565b600060405180830381600087803b1580156126bb57600080fd5b505af11580156126cf573d6000803e3d6000fd5b50506040516370a0823160e01b8152306004820152600092506001600160a01b03881691506370a0823190602401612190565b600580546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b600061275f60025490565b60000361276a575090565b600061271061277a60c8826139f5565b6127849085613997565b61278e91906139ae565b600a546040516341976e0960e01b81526000600482018190529293506001600160a01b03909116906341976e0990602401602060405180830381865afa1580156127dc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612800919061397e565b905060006305f5e1006128138385613997565b61281d91906139ae565b90506000612829613415565b90508061283560025490565b61283f9084613997565b6121dd91906139ae565b6001600160a01b0382166128735760405163ec442f0560e01b8152600060048201526024016108c7565b61287f600083836132eb565b5050565b60006064612892603284613997565b61289c91906139ae565b9050600060646128ad601985613997565b6128b791906139ae565b9050600060646128c8601986613997565b6128d291906139ae565b9050821561297f576009546040516000916001600160a01b03169085908381818185875af1925050503d8060008114612927576040519150601f19603f3d011682016040523d82523d6000602084013e61292c565b606091505b505090508061297d5760405162461bcd60e51b815260206004820152601a60248201527f4661696c656420746f2073656e642063726561746f722066656500000000000060448201526064016108c7565b505b600061298b8284613952565b1115612a3e576010546000906001600160a01b03166129aa8385613952565b604051600081818185875af1925050503d80600081146129e6576040519150601f19603f3d011682016040523d82523d6000602084013e6129eb565b606091505b5050905080612a3c5760405162461bcd60e51b815260206004820152601b60248201527f4661696c656420746f2073656e6420747265617375727920666565000000000060448201526064016108c7565b505b60408051848152602081018490529081018290527f312c5308f42848705a866c73dec11fd0783c2d64aac6a97e94467062ad3f40589060600160405180910390a150505050565b60008111612aa55760405162461bcd60e51b81526004016108c790613a08565b600b546001600160a01b0316612acd5760405162461bcd60e51b81526004016108c7906139d0565b600854600090612add90836139ae565b905060005b600854811015611e3457600060088281548110612b0157612b01613926565b6000918252602090912001546001600160a01b031690508215612db2576040805160028082526060820183526000926020830190803683375050600c5482519293506001600160a01b031691839150600090612b5f57612b5f613926565b60200260200101906001600160a01b031690816001600160a01b0316815250508181600181518110612b9357612b93613926565b6001600160a01b039283166020918202929092010152600c54600b5460405163095ea7b360e01b815290831660048201526024810187905291169063095ea7b3906044016020604051808303816000875af1158015612bf6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612c1a9190613a3f565b506040516370a0823160e01b81523060048201526000906001600160a01b038416906370a0823190602401602060405180830381865afa158015612c62573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612c86919061397e565b600b549091506001600160a01b0316635c11d7958660018530612cab426104b0613952565b6040518663ffffffff1660e01b8152600401612ccb959493929190613a61565b600060405180830381600087803b158015612ce557600080fd5b505af1925050508015612cf6575060015b612d0257505050612db4565b6040516370a0823160e01b81523060048201526000906001600160a01b038516906370a0823190602401602060405180830381865afa158015612d49573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612d6d919061397e565b90506000612d7b83836139f5565b6001600160a01b0386166000908152600d6020526040812080549293508392909190612da8908490613952565b9091555050505050505b505b80612dbe81613965565b915050612ae2565b600b546000906001600160a01b0316612df15760405162461bcd60e51b81526004016108c7906139d0565b60008211612e505760405162461bcd60e51b815260206004820152602660248201527f53656c6c2070657263656e74616765206d75737420626520677265617465722060448201526507468616e20360d41b60648201526084016108c7565b506000805b600854811015610bd557600060088281548110612e7457612e74613926565b60009182526020808320909101546001600160a01b0316808352600d90915260409091205490915080156131cb576000670de0b6b3a7640000612eb78784613997565b612ec191906139ae565b905080600003612ed3575050506131ce565b6040805160028082526060820183526000926020830190803683370190505090508381600081518110612f0857612f08613926565b6001600160a01b039283166020918202929092010152600c54825191169082906001908110612f3957612f39613926565b6001600160a01b039283166020918202929092010152600b5460405163095ea7b360e01b81529082166004820152602481018490529085169063095ea7b3906044016020604051808303816000875af1158015612f9a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612fbe9190613a3f565b50600c546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a0823190602401602060405180830381865afa158015613008573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061302c919061397e565b600b549091506001600160a01b0316635c11d7958460018530613051426104b0613952565b6040518663ffffffff1660e01b8152600401613071959493929190613a61565b600060405180830381600087803b15801561308b57600080fd5b505af115801561309f573d6000803e3d6000fd5b5050600c546040516370a0823160e01b8152306004820152600093506001600160a01b0390911691506370a0823190602401602060405180830381865afa1580156130ee573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613112919061397e565b9050600061312083836139f5565b905080156131c557600c54604051632e1a7d4d60e01b8152600481018390526001600160a01b0390911690632e1a7d4d90602401600060405180830381600087803b15801561316e57600080fd5b505af1158015613182573d6000803e3d6000fd5b5050505080896131929190613952565b6001600160a01b0388166000908152600d602052604081208054929b5087929091906131bf9084906139f5565b90915550505b50505050505b50505b806131d881613965565b915050612e55565b6001600160a01b03821661320a57604051634b637e8f60e11b8152600060048201526024016108c7565b61287f826000836132eb565b6001600160a01b0384166132405760405163e602df0560e01b8152600060048201526024016108c7565b6001600160a01b03831661326a57604051634a1406b160e11b8152600060048201526024016108c7565b6001600160a01b0380851660009081526001602090815260408083209387168352929052208290558015611ede57826001600160a01b0316846001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925846040516132dd91815260200190565b60405180910390a350505050565b6001600160a01b03831661331657806002600082825461330b9190613952565b909155506133889050565b6001600160a01b038316600090815260208190526040902054818110156133695760405163391434e360e21b81526001600160a01b038516600482015260248101829052604481018390526064016108c7565b6001600160a01b03841660009081526020819052604090209082900390555b6001600160a01b0382166133a4576002805482900390556133c3565b6001600160a01b03821660009081526020819052604090208054820190555b816001600160a01b0316836001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8360405161340891815260200190565b60405180910390a3505050565b600061342060025490565b60000361342d5750600090565b6000805b600854811015610bd55760006008828154811061345057613450613926565b60009182526020808320909101546001600160a01b0316808352600d909152604090912054909150801561351b57600a546040516341976e0960e01b81526001600160a01b03848116600483015260009216906341976e0990602401602060405180830381865afa1580156134c9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906134ed919061397e565b905060006305f5e1006135008385613997565b61350a91906139ae565b90506135168187613952565b955050505b5050808061352890613965565b915050613431565b600060208083528351808285015260005b8181101561355d57858101830151858201604001528201613541565b506000604082860101526040601f19601f8301168501019250505092915050565b80356001600160a01b038116811461359557600080fd5b919050565b600080604083850312156135ad57600080fd5b6135b68361357e565b946020939093013593505050565b6000602082840312156135d657600080fd5b6135df8261357e565b9392505050565b6000806000606084860312156135fb57600080fd5b6136048461357e565b92506136126020850161357e565b9150604084013590509250925092565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff8111828210171561366157613661613622565b604052919050565b600067ffffffffffffffff82111561368357613683613622565b5060051b60200190565b600082601f83011261369e57600080fd5b813560206136b36136ae83613669565b613638565b82815260059290921b840181019181810190868411156136d257600080fd5b8286015b848110156136ed57803583529183019183016136d6565b509695505050505050565b6000806040838503121561370b57600080fd5b823567ffffffffffffffff8082111561372357600080fd5b818501915085601f83011261373757600080fd5b813560206137476136ae83613669565b82815260059290921b8401810191818101908984111561376657600080fd5b948201945b8386101561378b5761377c8661357e565b8252948201949082019061376b565b965050860135925050808211156137a157600080fd5b506137ae8582860161368d565b9150509250929050565b600081518084526020808501945080840160005b838110156137f15781516001600160a01b0316875295820195908201906001016137cc565b509495945050505050565b600081518084526020808501945080840160005b838110156137f157815187529582019590820190600101613810565b60408152600061383f60408301856137b8565b828103602084015261385181856137fc565b95945050505050565b60006020828403121561386c57600080fd5b5035919050565b6020815260006135df60208301846137b8565b6000806040838503121561389957600080fd5b6138a28361357e565b91506138b06020840161357e565b90509250929050565b6060815260006138cc60608301866137b8565b82810360208401526138de81866137fc565b905082810360408401526121dd81856137fc565b600181811c9082168061390657607f821691505b602082108103610bd557634e487b7160e01b600052602260045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b808201808211156108715761087161393c565b6000600182016139775761397761393c565b5060010190565b60006020828403121561399057600080fd5b5051919050565b80820281158282048414176108715761087161393c565b6000826139cb57634e487b7160e01b600052601260045260246000fd5b500490565b6020808252600b908201526a111156081b9bdd081cd95d60aa1b604082015260600190565b818103818111156108715761087161393c565b6020808252601d908201527f416d6f756e74206d7573742062652067726561746572207468616e2030000000604082015260600190565b600060208284031215613a5157600080fd5b815180151581146135df57600080fd5b85815284602082015260a060408201526000613a8060a08301866137b8565b6001600160a01b0394909416606083015250608001529392505050565b828152604060208201526000613ab660408301846137b8565b949350505050565b60006020808385031215613ad157600080fd5b825167ffffffffffffffff811115613ae857600080fd5b8301601f81018513613af957600080fd5b8051613b076136ae82613669565b81815260059190911b82018301908381019087831115613b2657600080fd5b928401925b82841015613b4457835182529284019290840190613b2b565b97965050505050505056fea264697066735822122094f9324025a7e1eb9019b5610634d12ecaa4f08ebbd6c4022671553d7c2505ef64736f6c63430008140033a2646970667358221220f9ef0677176f6f8d2c7eeb5420778371afd7b65f88c54e8856cf98a39923369d64736f6c63430008140033",
  "devdoc": {
    "author": "Avanguard Index",
    "errors": {
      "OwnableInvalidOwner(address)": [
        {
          "details": "The owner is not a valid owner account. (eg. `address(0)`)"
        }
      ],
      "OwnableUnauthorizedAccount(address)": [
        {
          "details": "The caller account is not authorized to perform an operation."
        }
      ]
    },
    "kind": "dev",
    "methods": {
      "createFund(string,string,address[],uint256[])": {
        "details": "Create a new fund",
        "params": {
          "fundName": "Name of the fund",
          "fundTicker": "Ticker symbol for the fund",
          "tokens": "Array of underlying token addresses",
          "weightages": "Array of token weightages (in basis points, 100% = 10000)"
        }
      },
      "creationFee()": {
        "details": "Returns the fund creation fee."
      },
      "getCreatorFunds(address)": {
        "details": "Get all funds created by a specific creator",
        "params": {
          "creator": "The creator address"
        },
        "returns": {
          "_0": "Array of fund IDs created by the creator"
        }
      },
      "getFund(uint256)": {
        "details": "Get fund information by ID",
        "params": {
          "fundId": "The fund ID"
        },
        "returns": {
          "fundAddress": "The fund contract address",
          "fundName": "The fund name",
          "fundTicker": "The fund ticker",
          "underlyingTokens": "Array of underlying token addresses",
          "weightages": "Array of token weightages"
        }
      },
      "getFunds(uint256,uint256)": {
        "details": "Get all funds (for frontend pagination)",
        "params": {
          "endIndex": "Ending index",
          "startIndex": "Starting index"
        },
        "returns": {
          "_0": "Array of fund addresses"
        }
      },
      "getTotalFunds()": {
        "details": "Get total number of funds",
        "returns": {
          "_0": "Total number of funds created"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "updateAgiToken(address)": {
        "details": "Update AGI token address (only owner)",
        "params": {
          "newAgiToken": "New AGI token address"
        }
      },
      "updateDex(address)": {
        "details": "Update DEX address (only owner)",
        "params": {
          "newDex": "New DEX address"
        }
      },
      "updateOracle(address)": {
        "details": "Update oracle address (only owner)",
        "params": {
          "newOracle": "New oracle address"
        }
      },
      "updateTreasury(address)": {
        "details": "Update treasury address (only owner)",
        "params": {
          "newTreasury": "New treasury address"
        }
      },
      "updateWavax(address)": {
        "details": "Update WAVAX address (only owner)",
        "params": {
          "newWavax": "New WAVAX address"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "notice": "Fund Factory Contract - Creates and manages index funds",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 8,
        "contract": "contracts/FundFactory.sol:FundFactory",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 3265,
        "contract": "contracts/FundFactory.sol:FundFactory",
        "label": "agiToken",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(AGIToken)1015"
      },
      {
        "astId": 3267,
        "contract": "contracts/FundFactory.sol:FundFactory",
        "label": "oracle",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 3269,
        "contract": "contracts/FundFactory.sol:FundFactory",
        "label": "treasury",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 3271,
        "contract": "contracts/FundFactory.sol:FundFactory",
        "label": "dex",
        "offset": 0,
        "slot": "4",
        "type": "t_address"
      },
      {
        "astId": 3273,
        "contract": "contracts/FundFactory.sol:FundFactory",
        "label": "wavax",
        "offset": 0,
        "slot": "5",
        "type": "t_address"
      },
      {
        "astId": 3277,
        "contract": "contracts/FundFactory.sol:FundFactory",
        "label": "funds",
        "offset": 0,
        "slot": "6",
        "type": "t_array(t_contract(Fund)3247)dyn_storage"
      },
      {
        "astId": 3282,
        "contract": "contracts/FundFactory.sol:FundFactory",
        "label": "fundById",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_uint256,t_contract(Fund)3247)"
      },
      {
        "astId": 3287,
        "contract": "contracts/FundFactory.sol:FundFactory",
        "label": "creatorFunds",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_contract(Fund)3247)dyn_storage": {
        "base": "t_contract(Fund)3247",
        "encoding": "dynamic_array",
        "label": "contract Fund[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_contract(AGIToken)1015": {
        "encoding": "inplace",
        "label": "contract AGIToken",
        "numberOfBytes": "20"
      },
      "t_contract(Fund)3247": {
        "encoding": "inplace",
        "label": "contract Fund",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256[])",
        "numberOfBytes": "32",
        "value": "t_array(t_uint256)dyn_storage"
      },
      "t_mapping(t_uint256,t_contract(Fund)3247)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => contract Fund)",
        "numberOfBytes": "32",
        "value": "t_contract(Fund)3247"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}